<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pyramid on The Plone Expanse</title>
    <link>/tags/pyramid/</link>
    <description>Recent content in Pyramid on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <lastBuildDate>Sat, 25 Feb 2017 03:45:44 +0100</lastBuildDate>
    
	<atom:link href="/tags/pyramid/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using pyramid_jwt with pyramid_multiauth</title>
      <link>/blog/2017/02/25/using-pyramid_jwt-with-pyramid_multiauth/</link>
      <pubDate>Sat, 25 Feb 2017 03:45:44 +0100</pubDate>
      
      <guid>/blog/2017/02/25/using-pyramid_jwt-with-pyramid_multiauth/</guid>
      <description>pyramid_jwt has its own convenience method of registering as an authentication policy, through config.set_jwt_authentication_policy. It does so because the constructor of its policy takes a lot of arguments, so it&amp;rsquo;s best to trust the package to do its own setup.
But this makes it a bit harder to use with pyramid_multiauth, as you can&amp;rsquo;t easily pass the JWTAuthenticationPolicy policy to the multiauth.policies setting. Turns out that is not hard at all.</description>
    </item>
    
    <item>
      <title>Generate the route url for a Cornice service or resource</title>
      <link>/blog/2017/01/25/generate-the-route-url-for-a-cornice-service-or-resource/</link>
      <pubDate>Wed, 25 Jan 2017 23:09:45 +0100</pubDate>
      
      <guid>/blog/2017/01/25/generate-the-route-url-for-a-cornice-service-or-resource/</guid>
      <description>As far as I can tell, there&amp;rsquo;s no documentation on how to generate the reverse url for a Cornice resource or service. Suppose I want to publish a list of children resources and i want to make them behave as linked data. For that, I want to be able to generate proper URLs, based on the request URL.
This is some sample code to show how to achieve that, based on a side project I&amp;rsquo;m working on:</description>
    </item>
    
  </channel>
</rss>