<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on The Plone Expanse</title>
    <link>/tags/ajax/index.xml</link>
    <description>Recent content in Ajax on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <atom:link href="/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Software is lame</title>
      <link>/blog/2007/05/08/software-is-lame/</link>
      <pubDate>Tue, 08 May 2007 08:24:14 -0300</pubDate>
      
      <guid>/blog/2007/05/08/software-is-lame/</guid>
      <description>&lt;p&gt;I may sound like a fanboy or something, but I&#39;m starting to think that it&#39;s impossible to have a perfect piece of software, especially with larger systems. Two things that happened to me lately that made me think this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How lame is that Windows doesn&#39;t automount USB sticks when they&#39;re present at boot time? Why would I have to remove+reinsert the stick just so Windows will see the bloody thing? My Kubuntu, of course, handles perfectly everything in this department (at least in my case).&lt;/li&gt;&lt;li&gt;How lame is that &lt;a href=&#34;http://www.prototypejs.org&#34;&gt;Prototype&lt;/a&gt; handles in a really stupid way forms that have multiple submit buttons and are submitted through Ajax? Not even Form.request() will do the proper thing, which is to only leave one of the submit inputs in the stream, the one that has been clicked on. The problem is with zope.formlib, which gets the action and the validation from the submit button that was pressed. More then one submit input in the request and things become uncontrollable. &lt;br /&gt;To fix this I have added the following onsubmit handler to my Javascript code:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;my_form.onsubmit = function(event){&lt;br /&gt;    button = document.activeElement || event.explicitOriginalTarget;    // IE, Mozilla, Opera&lt;br /&gt;    this.getInputs(&#39;submit&#39;).each(function(el){&lt;br /&gt;          if (el.name != button.name) {&lt;br /&gt;                el.disable();&lt;br /&gt;          } &lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This disables all the submit input controls before serializing the form and doing an ajax request with Form.request(), as disabled inputs are ignored by serialize().&lt;/p&gt;&lt;p&gt;UPDATE: I am told that Prototype 1.6 will support multiple submit buttons. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Zope 3 AJAX viewlet manager</title>
      <link>/blog/2007/02/28/a-zope-3-ajax-viewlet-manager/</link>
      <pubDate>Wed, 28 Feb 2007 19:24:51 -0200</pubDate>
      
      <guid>/blog/2007/02/28/a-zope-3-ajax-viewlet-manager/</guid>
      <description>&lt;p&gt;I&#39;ve finally got tired of writing small fragments of JavaScript code and views to be able to make different areas updatable through ajax for my current Zope 3 application. Plus, when I&#39;ve started writing this application, I&#39;ve started doing the layout with viewlets and managers, and it seems that for each viewlet that I&#39;m creating I have to have a way to get its content through AJAX, which means having a page available for it, and this is very odd, as it almost defeats the point of having viewlets.&lt;/p&gt;&lt;p&gt;So I&#39;ve decided to create the &#34;Ajax viewlet manager&#34;. I&#39;m not sure how good of an idea this is, I&#39;ll have to give it some thought and see how I feel about it in the future. Let me describe my solution.&lt;/p&gt;&lt;p&gt;First, I want to be able to have the manager available at a certain URL, to be able to reload this URL through an Ajax call later on. So I&#39;ve created a new namespace traverser, ++vmanager++. A viewlet manager would be accessible (as rendered HTML) at a location such as http://localhost:8080/mysite/myobject/++vmanager++ITop. This is the traverser code:&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;from zope.publisher.interfaces.browser import IBrowserView&lt;br /&gt;from zope.traversing.interfaces import TraversalError&lt;br /&gt;from zope import component&lt;br /&gt;from zope.interface import implements&lt;br /&gt;from zope.traversing.namespace import SimpleHandler&lt;br /&gt;from zope.viewlet.interfaces import IViewletManager&lt;br /&gt;&lt;br /&gt;class vmanager(SimpleHandler):&lt;br /&gt;    implements(IBrowserView)&lt;br /&gt;    def __init__(self, context, request):&lt;br /&gt;        self.context = context&lt;br /&gt;        self.request = request&lt;br /&gt;        &lt;br /&gt;    def traverse(self, name, ignored):&lt;br /&gt;        manager = component.queryMultiAdapter((self.context, self.request, self), IViewletManager, name=name)&lt;br /&gt;        if manager:&lt;br /&gt;            return manager&lt;br /&gt;        else:&lt;br /&gt;            raise TraversalError(self.context, name)&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;The traverser is registered like this:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;adapter&lt;br /&gt;		name=&#34;vmanager&#34; for=&#34;*&#34;&lt;br /&gt;		provides=&#34;zope.traversing.interfaces.ITraversable&#34; &lt;br /&gt;		factory=&#34;.namespace.vmanager&#34;&lt;br /&gt;		/&amp;gt;&lt;br /&gt;		&lt;br /&gt;	&amp;lt;view&lt;br /&gt;		name=&#34;vmanager&#34; for=&#34;*&#34;&lt;br /&gt;		type=&#34;zope.interface.Interface&#34;&lt;br /&gt;		provides=&#34;zope.traversing.interfaces.ITraversable&#34; &lt;br /&gt;		factory=&#34;.namespace.vmanager&#34;&lt;br /&gt;		/&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;The traverse() in the vmanager class will return the manager. One thing to note is that once the manager returned, Zope will try to get the default view for this object, so a default page (index.html) is needed for IViewletManager&lt;/p&gt;&lt;pre&gt;class ViewViewletManager(object):&lt;br /&gt;    &#34;&#34;&#34;View a rendered viewlet manager&#34;&#34;&#34;&lt;br /&gt;    &lt;br /&gt;    def __call__(self):&lt;br /&gt;        manager = self.context&lt;br /&gt;        manager.update()&lt;br /&gt;        return manager.render()&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;This page is registered as &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;browser:page&lt;br /&gt;		name=&#34;index.html&#34;&lt;br /&gt;		class=&#34;.browser.ViewViewletManager&#34;&lt;br /&gt;		for=&#34;zope.viewlet.interfaces.IViewletManager&#34;&lt;br /&gt;		permission=&#34;zope.View&#34;&lt;br /&gt;		/&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;Next, to automate things a bit more, I wrote a template, along these lines:&lt;/p&gt;&lt;pre&gt;&amp;lt;tal:vars&lt;br /&gt;    tal:define=&#34;vmgr_name view/__name__; here_url context/@@absolute_url&#34;&amp;gt;&lt;br /&gt;    &amp;lt;div id=&#34;provider_ITop&#34;&lt;br /&gt;        tal:attributes=&#34;id string:provider_$vmgr_name&#34;&amp;gt;&lt;br /&gt;        &amp;lt;div tal:repeat=&#34;viewlet view/viewlets&#34; tal:omit-tag=&#34;&#34;&amp;gt;&lt;br /&gt;            &amp;lt;div tal:replace=&#34;structure viewlet/render&#34; /&amp;gt;&lt;br /&gt;        &amp;lt;/div&amp;gt;&lt;br /&gt;    &amp;lt;/div&amp;gt;&lt;br /&gt;    &amp;lt;script&lt;br /&gt;        tal:content=&#34;string:&lt;br /&gt;function reload_${vmgr_name}(){&lt;br /&gt;    new Ajax.Updater(&#39;provider_${vmgr_name}&#39;, &#39;$here_url/++vmanager++${vmgr_name}&#39;)&lt;br /&gt;}&#34; /&amp;gt;&lt;br /&gt;&amp;lt;/tal:vars&amp;gt;&lt;/pre&gt;

&lt;p&gt;This template inserts the viewlet contents in a named container and creates a JavaScript function (which uses Prototype) that can be called later to update that container. The last piece is to tell my viewlet providers to use this template (observe the template argument):&lt;/p&gt;&lt;pre&gt;&amp;lt;viewletManager name=&#34;IFooter&#34; provides=&#34;.IFooterSlotManager&#34;&lt;br /&gt;        class=&#34;z3c.viewlet.manager.WeightOrderedViewletManager&#34;&lt;br /&gt;        template=&#34;vmanager.pt&#34;&lt;br /&gt;        permission=&#34;zope.View&#34; /&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;I&#39;ll probably still have to write some views and JavaScript to make things dynamics, but this solution will sure help to reduce the amount of code I have to write.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fresh meat for programmers</title>
      <link>/blog/2007/02/16/fresh-meat-for-programmers/</link>
      <pubDate>Fri, 16 Feb 2007 20:52:16 -0200</pubDate>
      
      <guid>/blog/2007/02/16/fresh-meat-for-programmers/</guid>
      <description>&lt;p&gt;I&#39;ve just discovered (or rediscovered) some resources that I think are important enough to highlight here.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Zope Corporation has several eggs that are not published in the svn.zope.org subversion repository, eggs located at &lt;a href=&#34;http://download.zope.org&#34;&gt;download.zope.org&lt;/a&gt;. There are several very interesting packages there, including some to build an intranet. I&#39;ll definately have a look at them.&lt;/li&gt;&lt;li&gt;I&#39;ve rediscovered &lt;a href=&#34;http://openjsan.org/&#34;&gt;OpenJSAN&lt;/a&gt;, a Javascript repository full of goodies.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;And its really nice &lt;a href=&#34;http://planet.openjsan.org/&#34;&gt;Planet Javascript&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using FCKEditor in Ajax views on Zope 3</title>
      <link>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</link>
      <pubDate>Mon, 12 Feb 2007 21:14:48 -0200</pubDate>
      
      <guid>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</guid>
      <description>&lt;p&gt;I&#39;m working on a new, AJAX based application for a friend, which will run under Zope 3. Being a rather &#34;CMS-ish&#34; type of application, I need to provide an easy way to edit some rich text fields. I&#39;ve settled on the FCKEditor, for which there is an &lt;a href=&#34;http://svn.zope.org/zope.html/&#34;&gt;already packaged library as zope.html&lt;/a&gt; (also depends on zope.file). I would have used TinyMCE, but I hit on a problem: all these visual editors have difficulties when loaded in &#34;dynamic loaded views&#34;. &lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When using FCKEditor, everything seemed be fine for the first time, but the second time the editor was loaded, after the form was reloaded, there would be an error about a missing JavaScript object and the editor would fail to load. Form submission is handled by a function that serializes the form and makes an Ajax call, but the form object only contains the old values, not the new ones, as modified by the visual editor, so this had to be solved as well.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;I love TinyMCE for being able to scale down in terms of interface very easily, but I couldn&#39;t make it work in my scenario just as easily, so I gave up. The editor would load just fine, but when submitting the form, the entire web page would be replaced by a white page and would continue to keep loading, without any results. I&#39;ve found some mentioning of this problem on the web, and even in the TinyMCE wiki, but I couldn&#39;t work out what needs to be done in the short time that I had.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To solve the FCKEditor problems I had to do the following (&lt;a href=&#34;http://blog.zunch.com/post/Using_FCKEditor_in_AJAX.html&#34;&gt;blessed be the other bloggers of the Internet which already had to deal with this problem&lt;/a&gt;):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For the first problem, I&#39;ve inserted the following snippet in the form header:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;&lt;br /&gt;FCKeditorAPI = null;&lt;br /&gt;__FCKeditorNS = null;&lt;br /&gt;FCKTools = null;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;For the second problem, the form submit handler, I have the following code:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;if (FCKeditorAPI) {&lt;br /&gt;       for (instance in FCKeditorAPI.__Instances) {&lt;br /&gt;           field_name = instance.toString();&lt;br /&gt;           field_value = FCKeditorAPI.GetInstance(field_name).GetXHTML();&lt;br /&gt;           sub_form[field_name].value = field_value;&lt;br /&gt;       }&lt;br /&gt;   }&lt;/pre&gt;&lt;p&gt;While searching the net for other editors that might not have this problem, I&#39;ve found this page that contains a &lt;a href=&#34;http://www.geniisoft.com/showcase.nsf/WebEditors&#34;&gt;big listing of all types of HTML visual editors&lt;/a&gt;. To tell the truth, in my use case, I&#39;d be happy with something like Epoz (and I even have checked it on the web), but the project seems dead and I think I would have had to strip the zope/plone integration out of it.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;After more then 6 or 7 years of not having to deal with JavaScript I&#39;m very very rusty. Even for the most simple questions - like: how do you get the properties of an object? how do you check if an object has a property? how do you check if an object exists - I had to look at references. But it&#39;s all part of the learning experience, which fortunately, is the part that I enjoy most.&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>