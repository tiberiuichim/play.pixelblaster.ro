<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zope2 on The Plone Expanse</title>
    <link>/tags/zope2/</link>
    <description>Recent content in Zope2 on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <lastBuildDate>Sun, 08 Jan 2017 09:21:46 -0100</lastBuildDate>
    
	<atom:link href="/tags/zope2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Do you really need that metadata column?</title>
      <link>/blog/2017/01/08/do-you-really-need-that-metadata-column/</link>
      <pubDate>Sun, 08 Jan 2017 09:21:46 -0100</pubDate>
      
      <guid>/blog/2017/01/08/do-you-really-need-that-metadata-column/</guid>
      <description>It is one of the tenets of Plone optimization that brain.getObject() should be avoided and instead new metadata columns should be defined, to pass have that information in the brain. In the interest of keeping the ZODB free of junk and avoid duplication of information, I argue that it is possible sometimes to avoid polluting the catalog and instead use the information stored in the index itself.&amp;nbsp;
As an example: when exploring collective.</description>
    </item>
    
    <item>
      <title>Abusing Plone Content Rules to allow Site Admin customizations of sent emails</title>
      <link>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</link>
      <pubDate>Wed, 31 Aug 2016 08:12:43 -0200</pubDate>
      
      <guid>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</guid>
      <description>This would be a sort of tutorial on how to implement a new plone.app.contentrules Trigger Event, how to write a new plone.stringinterp variable substitutor and how to trigger the event from a browser page (or z3c.form).
This allows configuring a new trigger event from the Content Rules Plone control panel configlet and to assign a new Email action, with customizable body template.
Let&#39;s say our task is to implement a contact form:</description>
    </item>
    
    <item>
      <title>How to fake fix broken persistent objects in ZODB</title>
      <link>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</link>
      <pubDate>Thu, 18 Aug 2016 16:56:38 -0200</pubDate>
      
      <guid>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</guid>
      <description>I have a Zope / Plone website with some old objects created by Products.feedfeeder and they store (for some weird reason) instances of BeautifulSoup objects. These objects were created with BeautifulSoup 3 and the installed version of BS is 4, which moved its classes in the bs4.* namespace. Now, running full-sweep searches in the site or a full catalog reindex fails because of these, now broken, objects.
My solution, because I didn&#39;t care for those stored BeautifulSoup objects, was to fake the BeautifulSoup module and patch it into sys.</description>
    </item>
    
    <item>
      <title>Getting the superclasses for a python object</title>
      <link>/blog/2011/06/28/getting-the-superclasses-for-a-python-object/</link>
      <pubDate>Tue, 28 Jun 2011 17:08:06 -0300</pubDate>
      
      <guid>/blog/2011/06/28/getting-the-superclasses-for-a-python-object/</guid>
      <description>Zope 2 (and Plone) persistent objects usually have an intricate inheritance tree. Finding what classes an object inherits can be a time consuming task, hunting through the various eggs for the relevant source code. Below is a little snippet that shows how to easily get the list of superclasses:
(Pdb) pp type(ff).mro() (&amp;lt;class &#39;plone.app.blob.subtypes.image.ExtensionBlobField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;archetypes.schemaextender.field.TranslatableExtensionField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;archetypes.schemaextender.field.BaseExtensionField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;plone.app.blob.field.BlobField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.ObjectField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.Field&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Layer.DefaultLayerContainer&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;plone.app.blob.mixins.ImageFieldMixin&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.ImageField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.</description>
    </item>
    
    <item>
      <title>Set product configuration globally in zope.conf</title>
      <link>/blog/2011/02/08/set-product-configuration-globally-in-zope.conf/</link>
      <pubDate>Tue, 08 Feb 2011 19:46:42 -0200</pubDate>
      
      <guid>/blog/2011/02/08/set-product-configuration-globally-in-zope.conf/</guid>
      <description>I have a Zope product that needs to write in a centralized location, across multiple instances. The classic Python solution would be to write a variable in a config.py module and read that location from the code, but this feels unelegant in an environment that uses zc.buildout for deployment. The solution I have found is, as follows:
In buildout.cfg, in the instance part definition, add:
zope-conf-additional = &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;environment&amp;gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mylocation ${buildout:directory}/var/mylocation &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/environment&amp;gt;  Next, inside the product code I have:</description>
    </item>
    
    <item>
      <title>Success on a one year old problem installing CacheFu</title>
      <link>/blog/2009/02/28/success-on-a-one-year-old-problem-installing-cachefu/</link>
      <pubDate>Sat, 28 Feb 2009 17:47:14 -0200</pubDate>
      
      <guid>/blog/2009/02/28/success-on-a-one-year-old-problem-installing-cachefu/</guid>
      <description>I&#39;ve upgraded CacheFu (Products.CacheSetup) to the latest 1.2 for some of the websites that I manage, in a Plone 2.5 cluster. One of them had a problem that I haven&#39;t been able to track previously, due to limited time: on a reinstall of CacheSetup, due to product upgrades, CacheFu couldn&#39;t be installed anymore. The traceback was something like:
this product has already been installed without Quickinstaller!failed: Traceback (most recent call last): File &#34;</description>
    </item>
    
    <item>
      <title>Variable keys in dictionaries with Page Templates TALES syntax</title>
      <link>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</link>
      <pubDate>Wed, 11 Feb 2009 19:45:41 -0200</pubDate>
      
      <guid>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</guid>
      <description>I admit, I didn&#39;t knew this until now. In the following construction:
&amp;lt;div tal:content=&#34;somedict/keyname/someattr&#34; /&amp;gt; &#34;keyname&#34; is taken as a string, it&#39;s the literal name of the key for the somedict mapping. To use a variable instead of the literal value of the key name, I used to do:
&amp;lt;div tal:content=&#34;python somedict[key].someattr&#34; /&amp;gt; Browsing through the zope.app.catalog code, I saw that there&#39;s actually a way to use the TALES syntax:</description>
    </item>
    
    <item>
      <title>Bug in PyPi</title>
      <link>/blog/2008/08/22/bug-in-pypi/</link>
      <pubDate>Fri, 22 Aug 2008 16:16:07 -0300</pubDate>
      
      <guid>/blog/2008/08/22/bug-in-pypi/</guid>
      <description>The zope.app.form PyPi page looks awful, it should be fixed. Who&#39;s fault is that? Django, the framework that sits underneath (AFAIK), or the docutils libraries that probably parse the RST pages?</description>
    </item>
    
    <item>
      <title>Hosting Plone and Zope 3 applications using nginx</title>
      <link>/blog/2008/07/11/hosting-plone-and-zope-3-applications-using-nginx/</link>
      <pubDate>Fri, 11 Jul 2008 10:31:21 +0000</pubDate>
      
      <guid>/blog/2008/07/11/hosting-plone-and-zope-3-applications-using-nginx/</guid>
      <description>I&#39;m doing a setup on a new server, I&#39;ve decided to replace the default Apache 2.2 with an nginx http server. The setup which is needed for Zope 3 and Plone applications is the following:
[buildout] parts = &amp;nbsp;&amp;nbsp;&amp;nbsp; nginx &amp;nbsp;&amp;nbsp;&amp;nbsp; nginxctl [nginx] recipe = gocept.cmmi url = http://sysoev.ru/nginx/nginx-0.7.6.tar.gz md5sum = ae7ce6f66a2cf5a5970d9a9a0da0cf7d [nginxctl] recipe = gocept.nginx hostname = localhost port = 80 configuration = &amp;nbsp;&amp;nbsp;&amp;nbsp; worker_processes 1; &amp;nbsp;&amp;nbsp;&amp;nbsp; events { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; worker_connections 1024; &amp;nbsp;&amp;nbsp;&amp;nbsp; } &amp;nbsp;&amp;nbsp;&amp;nbsp; http { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upstream z3 { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; server 127.</description>
    </item>
    
    <item>
      <title>Using views as information mixins in templates</title>
      <link>/blog/2008/06/01/using-views-as-information-mixins-in-templates/</link>
      <pubDate>Sun, 01 Jun 2008 22:30:29 -0300</pubDate>
      
      <guid>/blog/2008/06/01/using-views-as-information-mixins-in-templates/</guid>
      <description>This may be basic trick for some, a non-obvious usage of views for others, who knows, I&#39;m documenting it here anyway. I&#39;ve been using this technique for quite some time without giving it much thought.
There are times when I have an object in a template. I want to display information associated with that object. This information is already coded in a @@detail view on this object. Suppose this example (in mostly pseudocode):</description>
    </item>
    
    <item>
      <title>In case you&#39;re having problems installing ssl-for-setuptools...</title>
      <link>/blog/2008/04/15/in-case-youre-having-problems-installing-ssl-for-setuptools.../</link>
      <pubDate>Tue, 15 Apr 2008 19:23:09 -0300</pubDate>
      
      <guid>/blog/2008/04/15/in-case-youre-having-problems-installing-ssl-for-setuptools.../</guid>
      <description>I&#39;ve stumbled on this error when trying to install a easyshop buildout:
Exception: No SSL support found
An error occured when trying to install ssl-for-setuptools 1.10.Look above this message for any errors thatwere output by easy_install.
While:
Installing instance.
Getting distribution for &#39;ssl-for-setuptools&#39;.
Error: Couldn&#39;t install: ssl-for-setuptools 1.10
 After scratching my head for a while, I&#39;ve found the solution:
# apt-get install libssl-dev </description>
    </item>
    
    <item>
      <title>A tip on debugging Zope 2 with ZEO</title>
      <link>/blog/2008/04/08/a-tip-on-debugging-zope-2-with-zeo/</link>
      <pubDate>Tue, 08 Apr 2008 20:20:18 -0300</pubDate>
      
      <guid>/blog/2008/04/08/a-tip-on-debugging-zope-2-with-zeo/</guid>
      <description>I&#39;m having some troubles with CacheFu, and I&#39;ve resorted to deleting some objects from a debug prompt, which is very easy to get at if one runs the Zope under ZEO. Still, I couldn&#39;t delete the objects because I was getting Unauthorized errors. Luckily, there is #plone, from which I got the following tip:
&amp;lt;naro&amp;gt; from AccessControl.SecurityManagement import newSecurityManager &amp;lt;naro&amp;gt; user = app.acl_users.getUser(&#39;admin&#39;) &amp;lt;naro&amp;gt; newSecurityManager(None, user)  Thanks, naro!&amp;nbsp;
Update: I realize now that I didn&#39;t write how to connect to ZEO:</description>
    </item>
    
    <item>
      <title>Open source Zope app in the news!</title>
      <link>/blog/2007/03/26/open-source-zope-app-in-the-news/</link>
      <pubDate>Mon, 26 Mar 2007 19:46:13 -0300</pubDate>
      
      <guid>/blog/2007/03/26/open-source-zope-app-in-the-news/</guid>
      <description>Today, on the front page of Slashdot, there was a link for an open source server monitoring &amp;amp; system management application. Well, what do you know, it runs on Zope 2! The visible source code is here</description>
    </item>
    
    <item>
      <title>Zope buildout quickstart</title>
      <link>/blog/2007/02/10/zope-buildout-quickstart/</link>
      <pubDate>Sat, 10 Feb 2007 22:19:56 -0200</pubDate>
      
      <guid>/blog/2007/02/10/zope-buildout-quickstart/</guid>
      <description>One of the bigger players in the latest move to automate Plone and Zope development and deployment has been buildout, so I figured it&#39;s about time to start learning it and see how it can help me. I&#39;m writing this short recipe as I progress through learning buildout to help me remember this stuff later on.
Installing buildoutThe easiest way to install buildout is to get easy_install (a manager for python packages) on your system.</description>
    </item>
    
    <item>
      <title>Setting a dynamic i18n:domain in a ZPT template</title>
      <link>/blog/2006/11/23/setting-a-dynamic-i18ndomain-in-a-zpt-template/</link>
      <pubDate>Thu, 23 Nov 2006 21:14:36 -0200</pubDate>
      
      <guid>/blog/2006/11/23/setting-a-dynamic-i18ndomain-in-a-zpt-template/</guid>
      <description>&amp;lt;h2 tal:define=&#34;statusMessage python:request.get(&#39;statusMessage&#39;); domain python:request.get(&#39;domain&#39;)&#34; tal:attributes=&#34;i18n:domain domain; i18n:translate string:&#34;&amp;gt;someText&amp;lt;/h2&amp;gt; </description>
    </item>
    
    <item>
      <title>Getting the parent object in an acquisition context</title>
      <link>/blog/2006/11/07/getting-the-parent-object-in-an-acquisition-context/</link>
      <pubDate>Tue, 07 Nov 2006 14:55:09 -0200</pubDate>
      
      <guid>/blog/2006/11/07/getting-the-parent-object-in-an-acquisition-context/</guid>
      <description>To get the parent of an object, you&#39;d have to use this code:
myparent = aq_inner.aq_parent.aq_self </description>
    </item>
    
    <item>
      <title>Deliverence - serving semi-static content out of a live site</title>
      <link>/blog/2006/10/21/deliverence---serving-semi-static-content-out-of-a-live-site/</link>
      <pubDate>Sat, 21 Oct 2006 22:19:51 -0300</pubDate>
      
      <guid>/blog/2006/10/21/deliverence---serving-semi-static-content-out-of-a-live-site/</guid>
      <description>Deliverance is a lightweight, semi-static system for content delivery of CMS resources. It runs in mod_python, generating branded pages and navigation elements, giving high-performance throughput to anonymous visitors.
Sounds interesting, especially in light of my contact with owners of bigger sites and editorial staff.
This product can be downloaded from http://codespeak.net/svn/z3/deliverance/</description>
    </item>
    
    <item>
      <title>Creating zope content</title>
      <link>/blog/2006/10/07/creating-zope-content/</link>
      <pubDate>Sat, 07 Oct 2006 17:24:36 -0300</pubDate>
      
      <guid>/blog/2006/10/07/creating-zope-content/</guid>
      <description>I had a need to create new external methods on install of a product. So, even if technique is old and well know to any Zope 2 old-timer, I&#39;m placing this here for my own reference.
def install(portal):
portal.manage_addProduct[&#39;ExternalMethod&#39;].manage_addExternalMethod(
id = &#39;emailMe&#39;,
title=&#39;emailMe&#39;,
module=&#39;MyProduct.emailMe&#39;,
function=&#39;emailMe&#39;)The code needs to interact with a legacy module (renamed here emailMe). The idea is that manage_addProduct returns a dictionary of factories and manage_addExternalMethod is the factory method defined in the ExternalMethod module.</description>
    </item>
    
    <item>
      <title>Start Plone (or Zope) in debug mode under Windows</title>
      <link>/blog/2006/10/04/start-plone-or-zope-in-debug-mode-under-windows/</link>
      <pubDate>Wed, 04 Oct 2006 17:58:54 -0300</pubDate>
      
      <guid>/blog/2006/10/04/start-plone-or-zope-in-debug-mode-under-windows/</guid>
      <description>Lifted from #plone:
bin/runzope.bat -X &#34;debug-mode=on&#34; </description>
    </item>
    
    <item>
      <title>Fixing a zope database with fsrecover.py</title>
      <link>/blog/2006/10/03/fixing-a-zope-database-with-fsrecover.py/</link>
      <pubDate>Tue, 03 Oct 2006 01:14:24 -0300</pubDate>
      
      <guid>/blog/2006/10/03/fixing-a-zope-database-with-fsrecover.py/</guid>
      <description>Due to hardware corruption I have a broken Data.fs that won&#39;t pack. To fix it the fsrecover.py script from the ZODB module can be used. For example, this is how to run the script to repair the broken database (I have zope installed in /opt/Zope2.8):
cd /opt/Zope2.8/lib/python/
python ZODB/fsrecover.py -v 1 /mnt/raid/Data.fs /mnt/raid/Data.fs.fixed
The reason to run the fsrecover script with ZODB in front is that it imports from the ZODB module.</description>
    </item>
    
    <item>
      <title>Moving a Zope instance</title>
      <link>/blog/2006/10/02/moving-a-zope-instance/</link>
      <pubDate>Mon, 02 Oct 2006 23:09:05 -0300</pubDate>
      
      <guid>/blog/2006/10/02/moving-a-zope-instance/</guid>
      <description>To move a zope instance location 3 files need to be edited in order to update the software home location:
runzopezopectletc/zope.conf (change the software home location, right at the top of the file)
 </description>
    </item>
    
    <item>
      <title>Override __bobo_traverse__ to provide custom URL  lookup</title>
      <link>/blog/2006/10/02/override-__bobo_traverse__-to-provide-custom-url--lookup/</link>
      <pubDate>Mon, 02 Oct 2006 14:06:20 -0300</pubDate>
      
      <guid>/blog/2006/10/02/override-__bobo_traverse__-to-provide-custom-url--lookup/</guid>
      <description>This technique is lifted from ATContentTypes/content/image.py
 def __bobo_traverse__(self, REQUEST, name):
&#34;&#34;&#34;Transparent access to image scales
&#34;&#34;&#34;
if name.startswith(&#39;image&#39;):
field = self.getField(&#39;image&#39;)
image = None
if name == &#39;image&#39;:
image = field.getScale(self)
else:
scalename = name[len(&#39;image_&#39;):]
if scalename in field.getAvailableSizes(self):
image = field.getScale(self, scale=scalename)
if image is not None and not isinstance(image, basestring):
# image might be None or &#39;&#39; for empty images
return image
return ATCTFileContent.__bobo_traverse__(self, REQUEST, name)
 </description>
    </item>
    
    <item>
      <title>Short intro to ZEO</title>
      <link>/blog/2006/08/14/short-intro-to-zeo/</link>
      <pubDate>Mon, 14 Aug 2006 19:37:45 -0300</pubDate>
      
      <guid>/blog/2006/08/14/short-intro-to-zeo/</guid>
      <description>Joel Burton is holding ad-hoc tutorials on IRC :-)
Anyway, here&#39;s his recipe to running ZEO
&amp;lt;joelburton&amp;gt; having your site running under zeo also allows you to &#34;zopectl debug&#34; it while it&#39;s still running, which is insanely useful. i _always_ run zope under zeo, even during development, even on my laptop, etc., and i recommend that to others.
&amp;lt;joelburton&amp;gt; thegoldenaura: zeo just splits zope-the-app-server and zope-the-database into two
&amp;lt;joelburton&amp;gt; the goldenaura: for small sites, where you expect to have just one zope server for your zeo server, i do it like this:</description>
    </item>
    
    <item>
      <title>Accessing a zope object stripped of acquisition</title>
      <link>/blog/2006/08/08/accessing-a-zope-object-stripped-of-acquisition/</link>
      <pubDate>Tue, 08 Aug 2006 18:48:59 -0300</pubDate>
      
      <guid>/blog/2006/08/08/accessing-a-zope-object-stripped-of-acquisition/</guid>
      <description>To get an object completely stripped of its acquisition layers, the following snippet can be employed
import Acquisition
obj_no_aq = Acquisition.aq_base(obj)
No acquisition means no methods or properties inherited from the container or the container chain.
Although a bit old, the Zope Developer Guide, with its chapter on Acquisition do a fine job at explaining the intricacies of acquisition in Zope 2.</description>
    </item>
    
    <item>
      <title>Getting the real path of a zope product</title>
      <link>/blog/2006/08/04/getting-the-real-path-of-a-zope-product/</link>
      <pubDate>Fri, 04 Aug 2006 15:09:38 -0300</pubDate>
      
      <guid>/blog/2006/08/04/getting-the-real-path-of-a-zope-product/</guid>
      <description>To get the path of a zope product, one can use the following snippet:
from Globals import package_home
product_path = package_home(product_globals) </description>
    </item>
    
    <item>
      <title>Locked yourself out of zope?</title>
      <link>/blog/2006/08/04/locked-yourself-out-of-zope/</link>
      <pubDate>Fri, 04 Aug 2006 14:41:09 -0300</pubDate>
      
      <guid>/blog/2006/08/04/locked-yourself-out-of-zope/</guid>
      <description>A very easy way to add a user to zope from outside zope:
Turn off zope.Run &amp;lt;instance_home&amp;gt;/bin/zopectl adduser username password
The user will be added as Owner to the acl_users in the main zope root.</description>
    </item>
    
  </channel>
</rss>