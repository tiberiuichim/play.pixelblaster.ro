<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Volto on The Plone Expanse</title>
    <link>/tags/volto/</link>
    <description>Recent content in Volto on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2019 Tiberiu Ichim</copyright>
    <lastBuildDate>Sun, 06 Feb 2022 18:05:18 +0200</lastBuildDate>
    
	<atom:link href="/tags/volto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Volto configuration to fix Babel problems with react-leaflet</title>
      <link>/blog/2022/02/06/custom-volto-configuration-to-fix-babel-problems-with-react-leaflet/</link>
      <pubDate>Sun, 06 Feb 2022 18:05:18 +0200</pubDate>
      
      <guid>/blog/2022/02/06/custom-volto-configuration-to-fix-babel-problems-with-react-leaflet/</guid>
      <description>I&amp;rsquo;ve started working on a new Leaflet-powered Volto map block and the first thing that happened while loading react-leaftlet was an error reported by the browser:
Module parse failed: Unexpected token (10:41) in @react-leaflet/core/esm/path.js ... const options = props.pathOptions ?? {}; ...  The problem is that is, for some reasons, the transpiled JS bundle includes code using the nulish coalescing operator
This is already a problem reported in react-leaflet and it happens because the distributed transpiled library includes that code.</description>
    </item>
    
    <item>
      <title>A Volto gotcha when dealing with async calls</title>
      <link>/blog/2019/12/11/a-volto-gotcha-when-dealing-with-async-calls/</link>
      <pubDate>Wed, 11 Dec 2019 21:35:24 +0100</pubDate>
      
      <guid>/blog/2019/12/11/a-volto-gotcha-when-dealing-with-async-calls/</guid>
      <description>Just some quick notes, in case this might help someone. After quite a bit of time and tests in trying to use asyncConnect to get data in a Volto component view (strictly focusing on the SSR side), I&amp;rsquo;ve realized that what I&amp;rsquo;m trying to do is not supported by the redux-connect library.
In Volto, right now there are two components that use asyncConnect: App.jsx and Search.jsx. The purpose of asyncConnect is to have the server side rendered page &amp;ldquo;dynamic&amp;rdquo;, depending on the input from the originating request.</description>
    </item>
    
    <item>
      <title>Speedup volto razzle builds</title>
      <link>/blog/2019/11/17/speedup-volto-razzle-builds/</link>
      <pubDate>Sun, 17 Nov 2019 13:58:36 +0100</pubDate>
      
      <guid>/blog/2019/11/17/speedup-volto-razzle-builds/</guid>
      <description>I&amp;rsquo;ve been looking for a way to speedup Volto razzle/webpack builds, both while developing and for &amp;ldquo;production&amp;rdquo; mode, when building the final bundle. Fortunately, this solution exists and it&amp;rsquo;s extremely easy to integrate.
Let&amp;rsquo;s define the problem, to see how to approach it: what is Volto actually? What do you get when you open, in your browser, a Volto frontend Plone website? To greatly simplify (and I hope I didn&amp;rsquo;t get anything wrong as I am not a Volto core developer):</description>
    </item>
    
  </channel>
</rss>