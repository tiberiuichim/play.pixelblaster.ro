<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zope on The Plone Expanse</title>
    <link>/tags/zope/</link>
    <description>Recent content in Zope on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2019 Tiberiu Ichim</copyright>
    <lastBuildDate>Thu, 03 Aug 2017 13:40:28 +0000</lastBuildDate>
    
	<atom:link href="/tags/zope/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Restore missing blobs from blob cache</title>
      <link>/blog/2017/08/03/restore-missing-blobs-from-blob-cache/</link>
      <pubDate>Thu, 03 Aug 2017 13:40:28 +0000</pubDate>
      
      <guid>/blog/2017/08/03/restore-missing-blobs-from-blob-cache/</guid>
      <description>I had a curious case of missing-but-present blobs in an old Plone service, configured with a Zeo server and 2 Zope instances.
The root of the problem (I think) was that the blob folder configuration was broken: the Zope client instances were configured with shared blobs to &amp;ldquo;off&amp;rdquo;, but they were really sharing the same caching folder.
In the end, the blobs were loaded by the Zope services and everything appeared to be working, but when I&amp;rsquo;ve tried to move the blobstorage folder to a new machine, I ended up with missing blobs.</description>
    </item>
    
    <item>
      <title>Do you really need that metadata column?</title>
      <link>/blog/2017/01/08/do-you-really-need-that-metadata-column/</link>
      <pubDate>Sun, 08 Jan 2017 09:21:46 -0100</pubDate>
      
      <guid>/blog/2017/01/08/do-you-really-need-that-metadata-column/</guid>
      <description>It is one of the tenets of Plone optimization that brain.getObject() should be avoided and instead new metadata columns should be defined, to pass have that information in the brain. In the interest of keeping the ZODB free of junk and avoid duplication of information, I argue that it is possible sometimes to avoid polluting the catalog and instead use the information stored in the index itself.&amp;nbsp;
As an example: when exploring collective.</description>
    </item>
    
    <item>
      <title>Abusing Plone Content Rules to allow Site Admin customizations of sent emails</title>
      <link>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</link>
      <pubDate>Wed, 31 Aug 2016 08:12:43 -0200</pubDate>
      
      <guid>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</guid>
      <description>This would be a sort of tutorial on how to implement a new plone.app.contentrules Trigger Event, how to write a new plone.stringinterp variable substitutor and how to trigger the event from a browser page (or z3c.form).
This allows configuring a new trigger event from the Content Rules Plone control panel configlet and to assign a new Email action, with customizable body template.
Let&#39;s say our task is to implement a contact form:</description>
    </item>
    
    <item>
      <title>How to fake fix broken persistent objects in ZODB</title>
      <link>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</link>
      <pubDate>Thu, 18 Aug 2016 16:56:38 -0200</pubDate>
      
      <guid>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</guid>
      <description>I have a Zope / Plone website with some old objects created by Products.feedfeeder and they store (for some weird reason) instances of BeautifulSoup objects. These objects were created with BeautifulSoup 3 and the installed version of BS is 4, which moved its classes in the bs4.* namespace. Now, running full-sweep searches in the site or a full catalog reindex fails because of these, now broken, objects.
My solution, because I didn&#39;t care for those stored BeautifulSoup objects, was to fake the BeautifulSoup module and patch it into sys.</description>
    </item>
    
    <item>
      <title>ZODB: How to get and read objects from an undo information</title>
      <link>/blog/2015/05/05/zodb-how-to-get-and-read-objects-from-an-undo-information/</link>
      <pubDate>Tue, 05 May 2015 08:07:56 +0700</pubDate>
      
      <guid>/blog/2015/05/05/zodb-how-to-get-and-read-objects-from-an-undo-information/</guid>
      <description>This is useful for example if you have transactions that cause writes to the database and you don&#39;t know what has been written. First, identify the ID of the transaction that you&#39;re interested. In the Undo tab of Zope, inspect the checkbox for the transaction and copy the part that looks like an id from its value.
Then, in a zope debugging shell (started with bin/instance debug), I&#39;ve done:
&amp;gt;&amp;gt;&amp;gt; import base64, cPickle &amp;gt;&amp;gt;&amp;gt; webtid = &#34;</description>
    </item>
    
    <item>
      <title>Making peace with the system-wide installed zope.interface</title>
      <link>/blog/2009/02/16/making-peace-with-the-system-wide-installed-zope.interface/</link>
      <pubDate>Mon, 16 Feb 2009 11:31:15 -0200</pubDate>
      
      <guid>/blog/2009/02/16/making-peace-with-the-system-wide-installed-zope.interface/</guid>
      <description>While testing software to play music from a computer on my network, I have discovered Elisa, which is a wonderful piece of software built in Python and zope.interface. The package manager helpfully installed a python-zopeinterface package, which turned out to break one of the apps I&#39;ve been working on (one of the packages that is used depends on a more recent version of zope.interface and breaks with a missing object import).</description>
    </item>
    
    <item>
      <title>Variable keys in dictionaries with Page Templates TALES syntax</title>
      <link>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</link>
      <pubDate>Wed, 11 Feb 2009 19:45:41 -0200</pubDate>
      
      <guid>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</guid>
      <description>I admit, I didn&#39;t knew this until now. In the following construction:
&amp;lt;div tal:content=&#34;somedict/keyname/someattr&#34; /&amp;gt; &#34;keyname&#34; is taken as a string, it&#39;s the literal name of the key for the somedict mapping. To use a variable instead of the literal value of the key name, I used to do:
&amp;lt;div tal:content=&#34;python somedict[key].someattr&#34; /&amp;gt; Browsing through the zope.app.catalog code, I saw that there&#39;s actually a way to use the TALES syntax:</description>
    </item>
    
  </channel>
</rss>