<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on The Plone Expanse</title>
    <link>/tags/windows/index.xml</link>
    <description>Recent content in Windows on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <atom:link href="/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Software is lame</title>
      <link>/blog/2007/05/08/software-is-lame/</link>
      <pubDate>Tue, 08 May 2007 08:24:14 -0300</pubDate>
      
      <guid>/blog/2007/05/08/software-is-lame/</guid>
      <description>&lt;p&gt;I may sound like a fanboy or something, but I&#39;m starting to think that it&#39;s impossible to have a perfect piece of software, especially with larger systems. Two things that happened to me lately that made me think this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How lame is that Windows doesn&#39;t automount USB sticks when they&#39;re present at boot time? Why would I have to remove+reinsert the stick just so Windows will see the bloody thing? My Kubuntu, of course, handles perfectly everything in this department (at least in my case).&lt;/li&gt;&lt;li&gt;How lame is that &lt;a href=&#34;http://www.prototypejs.org&#34;&gt;Prototype&lt;/a&gt; handles in a really stupid way forms that have multiple submit buttons and are submitted through Ajax? Not even Form.request() will do the proper thing, which is to only leave one of the submit inputs in the stream, the one that has been clicked on. The problem is with zope.formlib, which gets the action and the validation from the submit button that was pressed. More then one submit input in the request and things become uncontrollable. &lt;br /&gt;To fix this I have added the following onsubmit handler to my Javascript code:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;my_form.onsubmit = function(event){&lt;br /&gt;    button = document.activeElement || event.explicitOriginalTarget;    // IE, Mozilla, Opera&lt;br /&gt;    this.getInputs(&#39;submit&#39;).each(function(el){&lt;br /&gt;          if (el.name != button.name) {&lt;br /&gt;                el.disable();&lt;br /&gt;          } &lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This disables all the submit input controls before serializing the form and doing an ajax request with Form.request(), as disabled inputs are ignored by serialize().&lt;/p&gt;&lt;p&gt;UPDATE: I am told that Prototype 1.6 will support multiple submit buttons. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brettspielwelt - the free, online boardgame portal</title>
      <link>/blog/2007/05/03/brettspielwelt---the-free-online-boardgame-portal/</link>
      <pubDate>Thu, 03 May 2007 09:51:20 -0300</pubDate>
      
      <guid>/blog/2007/05/03/brettspielwelt---the-free-online-boardgame-portal/</guid>
      <description>&lt;p&gt;I live in Europe, I&#39;m a geek, so I must also be a boardgame freak. I love games, and especially German style boardgames, with their intricate rules. Unfortunately, there&#39;s not much time to play, and not a lot of people that I can play with. Following a link on boardgamesgeek.com I&#39;ve stumbled on this website, an &lt;a href=&#34;http://www.brettspielwelt.de&#34;&gt;online portal of boardgames&lt;/a&gt; that you can play, something similar to IGS (the Internet Go Server), but that implements loads of boardgames to be played in multiplayer style. The people are friendly and are willing to teach you to play (even in English). The client defaults to the German language, but this can be easily changed by changing the &#39;Nation = de&#39; line to &#39;Nation = en&#39; in the props file from the client download folder.&lt;/p&gt;&lt;p&gt;Being a Java application, it goes a long way to adding a few more entertainment choices to the ones available for the Linux platform, in terms of games.&lt;/p&gt;&lt;p&gt;UPDATE: There&#39;s a ton more of &lt;a href=&#34;http://www.boardgamegeek.com/wiki/page/On-line_Games&#34;&gt;sites with online boardgames at the boargamegeek wiki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Some of these sites:&lt;/p&gt;&lt;p&gt;http://www.flexgames.com/ (2 games)&lt;/p&gt;&lt;p&gt;http://www.yucata.de/Default.aspx (several, growing)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;games.asobrain.com (few, but has Settlers and Carcassonne)&lt;/p&gt;&lt;p&gt;http://www.spielbyweb.com/ (forum based)&lt;/p&gt;&lt;p&gt;http://yourturnmyturn.com/ (many, most classic)&lt;/p&gt;&lt;p&gt;http://hilinski.net/games/online/ (Taj Mahal and Tycoon)&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Freeciv rediscovered</title>
      <link>/blog/2007/03/20/freeciv-rediscovered/</link>
      <pubDate>Tue, 20 Mar 2007 10:22:51 -0200</pubDate>
      
      <guid>/blog/2007/03/20/freeciv-rediscovered/</guid>
      <description>&lt;p&gt;I&#39;ve recently &#34;rediscovered&#34; Freeciv. I&#39;m a very casual gamer (15 minutes/day), but also an old, addicted, Civilization fan. Lately I&#39;ve been looking for a nice game to play on my Linux desktops and I&#39;ve found that Freeciv is finally getting some good graphics, as this was my biggest turn off I&#39;ve had with it before. I&#39;ve tried first the SDL client on Windows, but it is buggy and tends to freeze its popup windows. The GTK Windows client is a lot better, works quite flawless as far as I can tell. I&#39;ve compiled the Linux version (on Ubuntu Edgy), first I&#39;ve tried the SDL client, but it complained (at configure time) about a missing sdl-image library, which I have (and no -dev version in my apt sources). Using the freeland-big tiles, the game had a huge memory footprint (40% of 1024 Mb RAM). The most apparent improvements are new tile graphics, with bigger size, new graphics for the city titles on the play screen, a new full-screen mode, even for the GTK version and a tree-based research screen. There is another tileset on the freeciv.org site, called Freeland-big. This has, IMHO, some improved tiles. Click on the image below to see the new graphics I&#39;m talking about (this is the default tileset). And another one, this time on &lt;a href=&#34;http://www.flickr.com/photos/60787066@N00/428083858/&#34;&gt;Linux, with Freeland-big tileset&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a title=&#34;Freeciv 2.1 screenshot&#34; href=&#34;topic_images/freeciv.jpg&#34;&gt;&lt;img class=&#34;image-inline&#34; src=&#34;topic_images/freeciv.jpg/image_preview&#34; alt=&#34;Freeciv 2.1 screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;UPDATE: Using the svn/trunk version the huge memory footprint problem of the Linux client is solved, but I can&#39;t use the freeland-big tileset anymore. To compile it on Ubuntu, I first had to apt-get install automake1.8 and libgtk2.0-dev. After that, run autoconf.sh to start the configure script generation and then make install. &lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embeding the Gecko engine in Python applications</title>
      <link>/blog/2007/03/10/embeding-the-gecko-engine-in-python-applications/</link>
      <pubDate>Sat, 10 Mar 2007 18:28:29 -0200</pubDate>
      
      <guid>/blog/2007/03/10/embeding-the-gecko-engine-in-python-applications/</guid>
      <description>&lt;p&gt;I&#39;ve got to deploy a new desktop based application, created, of course, with Zope 3. When you&#39;ve got a hammer, everything looks like a nail, indeed. This application uses HTML and CSS as its presentation layer (right, it&#39;s a web page), with a bit of Ajax thrown in. Due do time constraints, I&#39;m not even trying to get it to work properly on Internet Explorer (although it looks about 90% right, but I have some problems with Javascript), so I won&#39;t be embeding the Internet Explorer this time engine in my Python application, I&#39;ll just try to get the Gecko rendering engine, the one used in Firefox.&lt;/p&gt;&lt;p&gt;First, I&#39;ve installed the &lt;a href=&#34;http://www.iol.ie/~locka/mozilla/control.htm&#34;&gt;ActiveX control for the Gecko engine&lt;/a&gt;. Following some &lt;a href=&#34;http://www.wxpython.org/MigrationGuide.html&#34;&gt;ActiveX migration details on wxpython.org&lt;/a&gt;, I&#39;ve generated a wxpython &#34;binding&#34; class, using the genaxmodule.py tool (after a quick dig in the Windows registry to find out which is the Mozilla control class name):&lt;/p&gt;&lt;pre&gt;C:\Python24\Lib\site-packages\wx-2.6-msw-unicode\wx\tools&amp;gt;genaxmodule.py &#34;Mozilla.Browser&#34; Gecko&lt;br /&gt;Creating module in: .\Gecko.py&lt;br /&gt;  ProgID:   Mozilla.Browser.1&lt;br /&gt;  CLSID:    {1339B54C-3453-11D2-93B9-000000000000}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;The python code would that would use the ActiveX control would be something like this: &lt;br /&gt;&lt;/p&gt;&lt;pre&gt;# -*- coding: ISO-8859-1 -*-&lt;br /&gt;# generated by wxGlade 0.4.1cvs on Sat Mar 10 16:40:22 2007 from C:\Work\CourseBuilder.wxg&lt;br /&gt;&lt;br /&gt;import wx&lt;br /&gt;import Gecko&lt;br /&gt;&lt;br /&gt;def createGeckoControl(parent, id):&lt;br /&gt;    gecko = Gecko.Gecko(parent, id)&lt;br /&gt;    return gecko&lt;br /&gt;&lt;br /&gt;# begin wxGlade: dependencies&lt;br /&gt;# end wxGlade&lt;br /&gt;&lt;br /&gt;class MainFrame(wx.Frame):&lt;br /&gt;    def __init__(self, *args, **kwds):&lt;br /&gt;        # begin wxGlade: MainFrame.__init__&lt;br /&gt;        kwds[&#34;style&#34;] = wx.DEFAULT_FRAME_STYLE&lt;br /&gt;        wx.Frame.__init__(self, *args, **kwds)&lt;br /&gt;        self.panel_1 = wx.Panel(self, -1)&lt;br /&gt;        self.gecko = createGeckoControl(self.panel_1, -1)&lt;br /&gt;&lt;br /&gt;        self.__set_properties()&lt;br /&gt;        self.__do_layout()&lt;br /&gt;        # end wxGlade&lt;br /&gt;        self.gecko.SetFocus()&lt;br /&gt;        self.gecko.Navigate2(&#39;http://slashdot.org&#39;, 0)&lt;br /&gt;&lt;br /&gt;    def __set_properties(self):&lt;br /&gt;        # begin wxGlade: MainFrame.__set_properties&lt;br /&gt;        self.SetTitle(&#34;frame_1&#34;)&lt;br /&gt;        # end wxGlade&lt;br /&gt;&lt;br /&gt;    def __do_layout(self):&lt;br /&gt;        # begin wxGlade: MainFrame.__do_layout&lt;br /&gt;        sizer_1 = wx.BoxSizer(wx.VERTICAL)&lt;br /&gt;        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)&lt;br /&gt;        sizer_2.Add(self.gecko, 1, wx.EXPAND, 0)&lt;br /&gt;        self.panel_1.SetSizer(sizer_2)&lt;br /&gt;        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)&lt;br /&gt;        self.SetSizer(sizer_1)&lt;br /&gt;        sizer_1.Fit(self)&lt;br /&gt;        self.Layout()&lt;br /&gt;        # end wxGlade&lt;br /&gt;&lt;br /&gt;# end of class MainFrame&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;And the main app file:&lt;/p&gt;&lt;pre&gt;#!/usr/bin/env python&lt;br /&gt;# -*- coding: ISO-8859-1 -*-&lt;br /&gt;# generated by wxGlade 0.4.1cvs on Sat Mar 10 16:40:22 2007 from C:\Work\CourseBuilder.wxg&lt;br /&gt;&lt;br /&gt;import wx&lt;br /&gt;from MainFrame import MainFrame&lt;br /&gt;&lt;br /&gt;class CourseBuilderApp(wx.App):&lt;br /&gt;    def OnInit(self):&lt;br /&gt;        wx.InitAllImageHandlers()&lt;br /&gt;        main_frame = MainFrame(None, -1, &#34;&#34;)&lt;br /&gt;        self.SetTopWindow(main_frame)&lt;br /&gt;        main_frame.Show()&lt;br /&gt;        return 1&lt;br /&gt;&lt;br /&gt;# end of class CourseBuilderApp&lt;br /&gt;&lt;br /&gt;if __name__ == &#34;__main__&#34;:&lt;br /&gt;    CourseBuilderBrowser = CourseBuilderApp(0)&lt;br /&gt;    CourseBuilderBrowser.MainLoop()&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;Unfortunately I hit a problem that I can&#39;t find a solution for: this application crashes when I type something in the Gecko window. Blah :-( If anyone reading this know the answer, help me! :) Please! (tibi@life.org.ro)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;My only option left is to go for the XULRunner and the MyBrowser demo. I&#39;m not extremely happy about this, but at this point I don&#39;t see other options. Plus, it will be fun learning some about the Mozilla development platform.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Update: I&#39;ve tested the Mozilla ActiveX Control using a simple Delphi 7 form and, while I don&#39;t get a crash, I still can&#39;t get it to accept keyboard input. &lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start Plone (or Zope) in debug mode under Windows</title>
      <link>/blog/2006/10/04/start-plone-or-zope-in-debug-mode-under-windows/</link>
      <pubDate>Wed, 04 Oct 2006 17:58:54 -0300</pubDate>
      
      <guid>/blog/2006/10/04/start-plone-or-zope-in-debug-mode-under-windows/</guid>
      <description>&lt;p&gt;Lifted from #plone:&lt;/p&gt;&lt;pre&gt;bin/runzope.bat -X &#34;debug-mode=on&#34;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Printing frameworks and wxPython</title>
      <link>/blog/2006/09/06/printing-frameworks-and-wxpython/</link>
      <pubDate>Wed, 06 Sep 2006 16:48:34 -0300</pubDate>
      
      <guid>/blog/2006/09/06/printing-frameworks-and-wxpython/</guid>
      <description>&lt;p&gt;As hard as I have tried to find, there&#39;s no good printing framework for wxPython. wxEasyPrinting sucks so much for anything more then simple text (for example, the table cells don&#39;t support specifying a height). Generating PDF files with a toolkit such as ReportLab (even with Platypus) is harder then it should be, especially when there&#39;s no ready made higher level framework. &lt;a href=&#34;http://tgolden.sc.sabren.com/python/win32_how_do_i/print.html&#34; target=&#34;_self&#34;&gt;This page explores some of the common printing solutions on Windows&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;My own solution to all these is a single-platform hack. Based on my previous experience of creating a &#34;zope based desktop application&#34; using an embeded Internet Explorer, I&#39;m using Internet Explorer through ActiveX as a rendering and print preview engine. Building a new &#34;form&#34; is easy with any HTML GUI builder such as NVU or Dreamweaver and SimpleTAL bridges the gap between the application data and the presentation for printing. The trick is to display only the Print Preview dialog, which can&#39;t be done without going through Internet Explorer&#39;s back door.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;In my generated HTML files I have the following snippet, which automatically calls the Print Preview dialog from Internet Explorer when the file is loaded.&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Transitional//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#34;&amp;gt;&lt;br /&gt;&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;script&amp;gt;&lt;br /&gt;function printpr()&lt;br /&gt;{&lt;br /&gt;var OLECMDID = 7;&lt;br /&gt;/* OLECMDID values:&lt;br /&gt;* 6 - print&lt;br /&gt;* 7 - print preview&lt;br /&gt;* 1 - open window&lt;br /&gt;* 4 - Save As&lt;br /&gt;*/&lt;br /&gt;var PROMPT = 1; // 2 DONTPROMPTUSER &lt;br /&gt;var WebBrowser = &#34;&amp;lt;OBJECT ID=&#39;WebBrowser1&#39; WIDTH=0 HEIGHT=0 CLASSID=&#39;CLSID:8856F961-340A-11D0-A96B-00C04FD705A2&#39; /&amp;gt;&#34;;&lt;br /&gt;document.body.insertAdjacentHTML(&#39;beforeEnd&#39;, WebBrowser); &lt;br /&gt;WebBrowser1.ExecWB(OLECMDID, PROMPT);&lt;br /&gt;WebBrowser1.outerHTML = &#34;&#34;;&lt;br /&gt;}&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body onload=&#34;printpr(); return false;&#34;&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;Next, I have a frame with the IE ActiveX control embeded.&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;# -*- coding: ISO-8859-1 -*-&lt;br /&gt;# generated by wxGlade 0.4.1 on Sun Apr 30 20:43:52 2006&lt;br /&gt;&lt;br /&gt;import wx&lt;br /&gt;import  wx.lib.iewin    as  iewin&lt;br /&gt;&lt;br /&gt;# begin wxGlade: dependencies&lt;br /&gt;# end wxGlade&lt;br /&gt;&lt;br /&gt;def ieWidget(parent, id):&lt;br /&gt;	ie = iewin.IEHtmlWindow(parent, -1)&lt;br /&gt;	return ie&lt;br /&gt;&lt;br /&gt;class dlgIEFrame(wx.Frame):&lt;br /&gt;	def __init__(self, *args, **kwds):&lt;br /&gt;		# begin wxGlade: dlgIEFrame.__init__&lt;br /&gt;		kwds[&#34;style&#34;] = wx.DEFAULT_FRAME_STYLE&lt;br /&gt;		wx.Frame.__init__(self, *args, **kwds)&lt;br /&gt;		self.window_4 = ieWidget(self, -1)&lt;br /&gt;&lt;br /&gt;		self.__set_properties()&lt;br /&gt;		self.__do_layout()&lt;br /&gt;		# end wxGlade&lt;br /&gt;		self.ie = self.window_4&lt;br /&gt;		self.ie.SetClientSizeWH(300, 400)&lt;br /&gt;&lt;br /&gt;	def __set_properties(self):&lt;br /&gt;		# begin wxGlade: dlgIEFrame.__set_properties&lt;br /&gt;		self.SetTitle(&#34;frame_1&#34;)&lt;br /&gt;		self.SetSize((792, 755))&lt;br /&gt;		# end wxGlade&lt;br /&gt;&lt;br /&gt;	def __do_layout(self):&lt;br /&gt;		# begin wxGlade: dlgIEFrame.__do_layout&lt;br /&gt;		sizer_59 = wx.BoxSizer(wx.VERTICAL)&lt;br /&gt;		sizer_59.Add(self.window_4, 1, wx.EXPAND, 0)&lt;br /&gt;		self.SetAutoLayout(True)&lt;br /&gt;		self.SetSizer(sizer_59)&lt;br /&gt;		self.Layout()&lt;br /&gt;		self.Centre()&lt;br /&gt;		# end wxGlade&lt;br /&gt;&lt;br /&gt;# end of class dlgIEFrame&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;To display the printing dialog I&#39;m just dumping the generated HTML file to a temporary file and loading it into the IE control. &lt;br /&gt;
</description>
    </item>
    
    <item>
      <title>Running Microsoft Word as a Windows service</title>
      <link>/blog/2006/09/01/running-microsoft-word-as-a-windows-service/</link>
      <pubDate>Fri, 01 Sep 2006 13:09:44 -0300</pubDate>
      
      <guid>/blog/2006/09/01/running-microsoft-word-as-a-windows-service/</guid>
      <description>&lt;p&gt;Apparently, this is not recommended by Microsoft, but they have some pointers on how to achieve this on their website. &lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://support.microsoft.com/kb/288366/&#34; target=&#34;_self&#34;&gt;How to configure Office applications to run under the interactive user account&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://support.microsoft.com/kb/257757/&#34; target=&#34;_self&#34;&gt;Considerations for server-side Automation of Office&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;I ran through the steps in the first article and I can attest that it&#39;s possible to use Microsoft Word to generate, for example, PDF files by printing them from a service. I have the feeling that most of those steps are not needed if Word is not accessed as a COM service, and all is needed is to create a new user, start and configure Word to have a running instance and then configure the service to run as that user.&lt;br /&gt;
</description>
    </item>
    
  </channel>
</rss>