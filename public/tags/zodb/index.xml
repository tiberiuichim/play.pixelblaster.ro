<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zodb on The Plone Expanse</title>
    <link>/tags/zodb/</link>
    <description>Recent content in Zodb on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2017 Tiberiu Ichim</copyright>
    <lastBuildDate>Thu, 18 Aug 2016 16:56:38 -0200</lastBuildDate>
    
	<atom:link href="/tags/zodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to fake fix broken persistent objects in ZODB</title>
      <link>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</link>
      <pubDate>Thu, 18 Aug 2016 16:56:38 -0200</pubDate>
      
      <guid>/blog/2016/08/18/how-to-fake-fix-broken-persistent-objects-in-zodb/</guid>
      <description>I have a Zope / Plone website with some old objects created by Products.feedfeeder and they store (for some weird reason) instances of BeautifulSoup objects. These objects were created with BeautifulSoup 3 and the installed version of BS is 4, which moved its classes in the bs4.* namespace. Now, running full-sweep searches in the site or a full catalog reindex fails because of these, now broken, objects.
My solution, because I didn&#39;t care for those stored BeautifulSoup objects, was to fake the BeautifulSoup module and patch it into sys.</description>
    </item>
    
    <item>
      <title>ZODB: How to get and read objects from an undo information</title>
      <link>/blog/2015/05/05/zodb-how-to-get-and-read-objects-from-an-undo-information/</link>
      <pubDate>Tue, 05 May 2015 08:07:56 +0700</pubDate>
      
      <guid>/blog/2015/05/05/zodb-how-to-get-and-read-objects-from-an-undo-information/</guid>
      <description>This is useful for example if you have transactions that cause writes to the database and you don&#39;t know what has been written. First, identify the ID of the transaction that you&#39;re interested. In the Undo tab of Zope, inspect the checkbox for the transaction and copy the part that looks like an id from its value.
Then, in a zope debugging shell (started with bin/instance debug), I&#39;ve done:
&amp;gt;&amp;gt;&amp;gt; import base64, cPickle &amp;gt;&amp;gt;&amp;gt; webtid = &#34;</description>
    </item>
    
  </channel>
</rss>