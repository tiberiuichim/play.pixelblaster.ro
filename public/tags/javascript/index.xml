<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on The Plone Expanse</title>
    <link>/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stupid Internet Explorer and stupid IE bugs</title>
      <link>/blog/2008/09/15/stupid-internet-explorer-and-stupid-ie-bugs/</link>
      <pubDate>Mon, 15 Sep 2008 14:38:42 -0300</pubDate>
      
      <guid>/blog/2008/09/15/stupid-internet-explorer-and-stupid-ie-bugs/</guid>
      <description>&lt;p&gt;I&#39;m placing the finishing touches on a web application I&#39;ve been writing on and off for the last year. At last, I&#39;ve reached Internet Explorer bugs, which are usually the last to be fixed. Among several other stupid but documented bugs, I&#39;ve found one which I couldn&#39;t find documented in a shallow search on Google: it seems IE has an algorithm for comparing strings that is different then the one that is used internally when sorting an array of strings.&lt;/p&gt;
&lt;p&gt;Take this code, for example, where I have separated the issue:&lt;/p&gt;
&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script&amp;gt;

var x = [
  &#34;Zwischenwasse&#34;,
  &#34;Gurtis&#34;,
  &#34;Götzis&#34;,
  &#34;Partenen&#34;,
  &#34;Raggal&#34;,
  &#34;Rietz&#34;,
  &#34;Schnifis&#34;,
  &#34;Vösendorf&#34;,
  &#34;Bludenz&#34;,
  &#34;Galtür&#34;
];

var y = [
  [34241, &#34;Zwischenwasse&#34;],
  [11223, &#34;Gurtis&#34;],
  [12321, &#34;Götzis&#34;],
  [12345, &#34;Partenen&#34;],
  [32454, &#34;Raggal&#34;],
  [34355, &#34;Rietz&#34;],
  [43453, &#34;Schnifis&#34;],
  [42321, &#34;Vösendorf&#34;],
  [43435, &#34;Bludenz&#34;],
  [43222, &#34;Galtür&#34;]
];

x.sort();
document.write(x);

document.write(&#34;&amp;lt;br/&amp;gt;&#34;);

var sorted = y.sort(function(a,b){
	return a[1] &amp;gt; b[1];
});

for (var i=0;i&amp;lt;sorted.length;i++) {
	document.write(sorted[i][1]+ &#34;,&#34;);
}
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The value which will be written in Internet Explorer when running this html document is:&lt;/p&gt;
&lt;pre&gt;Bludenz,Galtür,Gurtis,Götzis,Partenen,Raggal,Rietz,Schnifis,Vösendorf,Zwischenwasse
Bludenz,Galtür,Zwischenwasse,Gurtis,Götzis,Partenen,Raggal,Rietz,Schnifis,Vösendorf, 
&lt;/pre&gt;
&lt;p&gt;Needless to say, in Firefox both lines will be the same, displayed in the proper order. On a side note, while I&#39;m bashing Internet Explorer, let me just say that Internet Explorer 8 is a broken piece of software, at least on the side that I&#39;m concerned. The developer tools are really buggy and tend to block the browser for even trivial operations (that is, when it doesn&#39;t crash it completely).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: apparently my mind is clouded with too much Python (I admit that Javascript is not a language that I use often). The problem is that the inline function used as sorting discriminator should return numeric values of -1, 0, 1, like this:&lt;/p&gt;
&lt;pre&gt;var sorted = y.sort(function(a,b){
	if (a[1] &amp;gt; b[1]){
		return 1;
	}
	if (a[1] &amp;lt; b[1]){
		return -1
	}
	return 0;
});
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Problem with jQuery version 1.2.2 and getJSON</title>
      <link>/blog/2008/01/27/problem-with-jquery-version-1.2.2-and-getjson/</link>
      <pubDate>Sun, 27 Jan 2008 14:53:25 -0200</pubDate>
      
      <guid>/blog/2008/01/27/problem-with-jquery-version-1.2.2-and-getjson/</guid>
      <description>&lt;p&gt;It took me a couple of hours to track this (I was just starting a new project using jQuery), but I finally nailed it: jQuery version 1.2.2 has a problem with loading JSON data from absolute urls. Use the trunk version and you&#39;ll be fine.&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software is lame</title>
      <link>/blog/2007/05/08/software-is-lame/</link>
      <pubDate>Tue, 08 May 2007 08:24:14 -0300</pubDate>
      
      <guid>/blog/2007/05/08/software-is-lame/</guid>
      <description>&lt;p&gt;I may sound like a fanboy or something, but I&#39;m starting to think that it&#39;s impossible to have a perfect piece of software, especially with larger systems. Two things that happened to me lately that made me think this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;How lame is that Windows doesn&#39;t automount USB sticks when they&#39;re present at boot time? Why would I have to remove+reinsert the stick just so Windows will see the bloody thing? My Kubuntu, of course, handles perfectly everything in this department (at least in my case).&lt;/li&gt;&lt;li&gt;How lame is that &lt;a href=&#34;http://www.prototypejs.org&#34;&gt;Prototype&lt;/a&gt; handles in a really stupid way forms that have multiple submit buttons and are submitted through Ajax? Not even Form.request() will do the proper thing, which is to only leave one of the submit inputs in the stream, the one that has been clicked on. The problem is with zope.formlib, which gets the action and the validation from the submit button that was pressed. More then one submit input in the request and things become uncontrollable. &lt;br /&gt;To fix this I have added the following onsubmit handler to my Javascript code:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;my_form.onsubmit = function(event){&lt;br /&gt;    button = document.activeElement || event.explicitOriginalTarget;    // IE, Mozilla, Opera&lt;br /&gt;    this.getInputs(&#39;submit&#39;).each(function(el){&lt;br /&gt;          if (el.name != button.name) {&lt;br /&gt;                el.disable();&lt;br /&gt;          } &lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This disables all the submit input controls before serializing the form and doing an ajax request with Form.request(), as disabled inputs are ignored by serialize().&lt;/p&gt;&lt;p&gt;UPDATE: I am told that Prototype 1.6 will support multiple submit buttons. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One issue using Prototype&#39;s Ajax form submission with Zope 3</title>
      <link>/blog/2007/03/25/one-issue-using-prototypes-ajax-form-submission-with-zope-3/</link>
      <pubDate>Sun, 25 Mar 2007 16:08:02 -0300</pubDate>
      
      <guid>/blog/2007/03/25/one-issue-using-prototypes-ajax-form-submission-with-zope-3/</guid>
      <description>&lt;p&gt;I&#39;ve found a weird issue while trying to debug why on of my Ajax loaded forms wasn&#39;t, apparently, properly validated. Even though that the schema specified that the fields are required, the form action would get executed as if the validation wouldn&#39;t have been done or the request was properly validated. I thought at first that there&#39;s an issue with the form class/handling itself, but after some testing I came to the conclusion that it has to be the way I&#39;m doing the AJAX request. &lt;br /&gt;&lt;/p&gt;&lt;p&gt;What I have discovered is that I was using the &lt;i&gt;parameters&lt;/i&gt; option of the Ajax.Request to make a form submit with POST method, which apparently causes Zope to validate the fields as having a value, even though they were empty. The right way to do this request is using the &lt;i&gt;postBody&lt;/i&gt; parameter, as fixing that made my forms work again. I&#39;m not sure what causes this behaviour in Zope: the visible difference is that postBody includes all the form inputs, even the empty ones, while the parameters version includes just those with a value (in my case, the submit button). And I have tried leaving out a field from the Zope request by saving the html page, deleting one of the inputs and doing a form submission, but Zope does the right thing in this case.&lt;/p&gt;&lt;p&gt;I&#39;m not sure how popular is using the parameters option with POST and Ajax.Request, but I&#39;m adding this note here, just in case.&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;postBody version &lt;br /&gt;&lt;/h3&gt;&lt;p&gt;POST /++skin++course/site/new_design.html HTTP/1.1&lt;br /&gt;Host: localhost:8080&lt;br /&gt;User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1) Gecko/20061024 Firefox/2.0 (Swiftfox)&lt;br /&gt;Accept: text/javascript, text/html, application/xml, text/xml, */*&lt;br /&gt;Accept-Language: en-us,en;q=0.7,ro;q=0.3&lt;br /&gt;Accept-Encoding: gzip,deflate&lt;br /&gt;Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7&lt;br /&gt;Keep-Alive: 300&lt;br /&gt;Connection: keep-alive&lt;br /&gt;X-Requested-With: XMLHttpRequest&lt;br /&gt;X-Prototype-Version: 1.5.1_rc1&lt;br /&gt;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&lt;br /&gt;Referer: http://localhost:8080/++skin++course/site/&lt;br /&gt;Content-Length: 94&lt;br /&gt;Cookie: top_http___localhost_9080_t2_sticky_view=354px; left_http___localhost_9080_t2_sticky_view=646px; state_http___localhost_9080_t2_sticky_view=hide; zindex_http___localhost_9080_t2_sticky_view=5; WT_FPC=id=82.79.74.153-1913305056.29841814:lv=1172488789513:ss=1172484509013&lt;br /&gt;Authorization: Basic dGliaTp2aWNlcm95&lt;br /&gt;Pragma: no-cache&lt;br /&gt;Cache-Control: no-cache&lt;br /&gt;add_design.title=&amp;amp;add_design.description=&amp;amp;add_design.actions.4164642064657369676e=Add%20design&lt;br /&gt;HTTP/1.x 200 OK&lt;br /&gt;Content-Length: 4408&lt;br /&gt;X-Powered-By: Zope (www.zope.org), Python (www.python.org)&lt;br /&gt;Accept-Ranges: bytes&lt;br /&gt;Server: Twisted/2.5.0+rUnknown TwistedWeb/[twisted.web2, version 0.2.0 (SVN rUnknown)]&lt;br /&gt;Date: Sun, 25 Mar 2007 11:56:52 GMT&lt;br /&gt;Content-Type: text/html;charset=utf-8&lt;br /&gt;----------------------------------------------------------&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;parameters version&lt;/h3&gt;&lt;br /&gt;POST /++skin++course/site/new_design.html HTTP/1.1&lt;br /&gt;Host: localhost:8080&lt;br /&gt;User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1) Gecko/20061024 Firefox/2.0 (Swiftfox)&lt;br /&gt;Accept: text/javascript, text/html, application/xml, text/xml, */*&lt;br /&gt;Accept-Language: en-us,en;q=0.7,ro;q=0.3&lt;br /&gt;Accept-Encoding: gzip,deflate&lt;br /&gt;Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7&lt;br /&gt;Keep-Alive: 300&lt;br /&gt;Connection: keep-alive&lt;br /&gt;X-Requested-With: XMLHttpRequest&lt;br /&gt;X-Prototype-Version: 1.5.1_rc1&lt;br /&gt;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&lt;br /&gt;Referer: http://localhost:8080/++skin++course/site/&lt;br /&gt;Content-Length: 52&lt;br /&gt;Cookie: top_http___localhost_9080_t2_sticky_view=354px; left_http___localhost_9080_t2_sticky_view=646px; state_http___localhost_9080_t2_sticky_view=hide; zindex_http___localhost_9080_t2_sticky_view=5; WT_FPC=id=82.79.74.153-1913305056.29841814:lv=1172488789513:ss=1172484509013&lt;br /&gt;Authorization: Basic dGliaTp2aWNlcm95&lt;br /&gt;Pragma: no-cache&lt;br /&gt;Cache-Control: no-cache&lt;br /&gt;add_design.actions.4164642064657369676e=Add%20design&lt;br /&gt;HTTP/1.x 200 OK&lt;br /&gt;Content-Length: 3491&lt;br /&gt;X-Powered-By: Zope (www.zope.org), Python (www.python.org)&lt;br /&gt;Accept-Ranges: bytes&lt;br /&gt;Server: Twisted/2.5.0+rUnknown TwistedWeb/[twisted.web2, version 0.2.0 (SVN rUnknown)]&lt;br /&gt;Date: Sun, 25 Mar 2007 11:56:15 GMT&lt;br /&gt;Content-Type: text/html;charset=utf-8&lt;br /&gt;----------------------------------------------------------&lt;br /&gt;
</description>
    </item>
    
    <item>
      <title>I hate brackets! (or rants of a JavaScript novice programmer)</title>
      <link>/blog/2007/02/27/i-hate-brackets-or-rants-of-a-javascript-novice-programmer/</link>
      <pubDate>Tue, 27 Feb 2007 17:09:31 -0200</pubDate>
      
      <guid>/blog/2007/02/27/i-hate-brackets-or-rants-of-a-javascript-novice-programmer/</guid>
      <description>&lt;p&gt;Javascript is nice, I&#39;m having fun building this Zope3/Ajax based application that I&#39;m working on right now. What I don&#39;t enjoy is the forest of non-alphanumeric characters that has started to clog my code. I&#39;m really a novice when it comes to Javascript, most of my professional programming has been done with other languages, but look for example at this fragment of code:&lt;/p&gt;&lt;pre&gt;    for (i=0; i&amp;lt; parent.childNodes.length; i++) {&lt;br /&gt;        el = parent.childNodes.item(i)&lt;br /&gt;        if(el.nodeType == Node.ELEMENT_NODE) {&lt;br /&gt;            if (el.classNames().find(function(s){return s == &#39;ajax_response&#39;}))&lt;br /&gt;            {&lt;br /&gt;                parent.removeChild(parent.childNodes.item(i));&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;p&gt;It&#39;s a simple snippet that checks if there&#39;s already an &#34;ajax_response&#34; container in the parent container.  On line 4 I&#39;ve stretched the code as much as I could, already reaching 80 characters (I&#39;m using Prototype, the reasons there&#39;s an anonymous function as parameter to the find(), applied on an Enumerator object). The code is ugly and hard to read and comprehend. I&#39;m really beginning to appreciate Python, a python version would have been something like this (trying not to differ too much from the JS version):&lt;/p&gt;&lt;pre&gt;for i in range(parent.childNodes.length()):&lt;br /&gt;    el = parent.childNodes[i]&lt;br /&gt;    if el.nodeType is Node.ELEMENT_NODE) and \&lt;br /&gt;         &#39;ajax_response&#39; in el.classNames():&lt;br /&gt;                parent.removeChild(parent.childNodes.item(i))&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;The block of code have been reduced to almost half the number of lines and I dare say that now it is really possible to read an understand this snippet. Probably the JS code could be improved as well, but I&#39;ll keep such optimizations for later on, when my Js-Foo gets better.&lt;/p&gt;&lt;h3&gt;Updated (again)&lt;br /&gt;&lt;/h3&gt;&lt;p&gt;I wrote a Prototype extension to create a &#34;scrollable area&#34;. I&#39;ve modeled the code after the &lt;a href=&#34;http://livepipe.net/projects/control_tabs/&#34;&gt;Control.Tabs&lt;/a&gt; extension. The control is almost ready. I feel good after understanding JS&#39;s OOP system and the Prototype extensions, its bind/bindAsEventListener quirks, but the code remains the same unreadable mess, when compared to Python code.&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;sizeToNumber = function(size){&lt;br /&gt;	//converts a style size (ex: 10px) to a number. Hackish method&lt;br /&gt;	return size.substring(0, size.length -2) * 1&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if(typeof(Control) == &#34;undefined&#34;)&lt;br /&gt;	var Control = {};&lt;br /&gt;Control.Scroller = Class.create();&lt;br /&gt;Object.extend(Control.Scroller.prototype, {&lt;br /&gt;	container:false,&lt;br /&gt;	initialize:function(area, options){&lt;br /&gt;&lt;br /&gt;		// set the options&lt;br /&gt;		this.options = $H({&lt;br /&gt;			timeslice:0.1,&lt;br /&gt;			amount:5, &lt;br /&gt;			type:&#39;vertical&#39;,&lt;br /&gt;			width:&#39;500px&#39;,&lt;br /&gt;			height:&#39;400px&#39;&lt;br /&gt;		}).merge(options || {});&lt;br /&gt;		this.area = $(area);&lt;br /&gt;		this.sid = &#39;scroller&#39; + this.area.id;&lt;br /&gt;		// insert the control structures&lt;br /&gt;		new Insertion.After(this.area, &lt;br /&gt;			&#34;&amp;lt;div class=&#39;scroller &#34; + this.options.type + &#34;&#39; id=&#39;&#34; + this.sid + &#34;&#39;&amp;gt;&#34; +&lt;br /&gt;				&#34;&amp;lt;div class=&#39;sb b_A&#39; id=&#39;&#34; + this.sid + &#34;sb&#39;&amp;gt;&amp;lt;/div&amp;gt;&#34; + &lt;br /&gt;				&#34;&amp;lt;div class=&#39;s_outer&#39;&amp;gt;&#34; +&lt;br /&gt;					&#34;&amp;lt;div class=&#39;s_inner&#39;&amp;gt;&amp;lt;/div&amp;gt;&#34; + &lt;br /&gt;				&#34;&amp;lt;/div&amp;gt;&#34; + &lt;br /&gt;				&#34;&amp;lt;div class=&#39;sb b_B&#39; id=&#39;&#34; + this.sid + &#34;sr&#39;&amp;gt;&amp;lt;/div&amp;gt;&#34; +&lt;br /&gt;			&#34;&amp;lt;/div&amp;gt;&#34;&lt;br /&gt;		);&lt;br /&gt;					&lt;br /&gt;		// div scroller  &amp;lt;- container for the entire control&lt;br /&gt;		// div sb b_A    &amp;lt;- scroll button. b_A = button A, b_B = button B&lt;br /&gt;		// div s_outer   &amp;lt;- The restricted visible portion of the scrolled content. Has overflow:hidden&lt;br /&gt;		// div s_inner	 &amp;lt;- Container which holds the actual content&lt;br /&gt;&lt;br /&gt;		inner = $(this.sid).down(&#39;.s_inner&#39;);&lt;br /&gt;		outer = $(this.sid).down(&#39;.s_outer&#39;);&lt;br /&gt;		&lt;br /&gt;		inner.appendChild(this.area);&lt;br /&gt;		outer.style.overflow = &#39;hidden&#39;;&lt;br /&gt;		// TODO: only apply one of height/weight&lt;br /&gt;&lt;br /&gt;		switch (this.options.type) {&lt;br /&gt;			case &#39;vertical&#39;:&lt;br /&gt;				this.direction = &#39;marginTop&#39;;&lt;br /&gt;				outer.style.height = this.options.height;				&lt;br /&gt;				inner.style.height = this.area.clientHeight + &#39;px&#39;;&lt;br /&gt;				break&lt;br /&gt;			case &#39;horizontal&#39;:&lt;br /&gt;				this.direction = &#39;marginLeft&#39;;&lt;br /&gt;				outer.style.width = this.options.width;&lt;br /&gt;				inner.style.width = this.area.clientWidth + &#39;px&#39;;&lt;br /&gt;				break&lt;br /&gt;			default:&lt;br /&gt;				throw (&#34;Unsported orientation/style type&#34;) &lt;br /&gt;		}&lt;br /&gt;				&lt;br /&gt;		//event handlers LEFT (or TOP) scroll button&lt;br /&gt;		$(this.sid).down(&#39;.b_A&#39;).observe(&#39;mousedown&#39;, function(event){&lt;br /&gt;			this.flag=true;&lt;br /&gt;			new PeriodicalExecuter(function(pe){&lt;br /&gt;				if (this.flag) {&lt;br /&gt;				  	this.doScroll(this.options.amount);&lt;br /&gt;				} else {&lt;br /&gt;				  	pe.stop();&lt;br /&gt;				}&lt;br /&gt;	    	}.bind(this), this.options.timeslice);&lt;br /&gt;		}.bindAsEventListener(this));&lt;br /&gt;		$(this.sid).down(&#39;.b_A&#39;).observe(&#39;mouseup&#39;, function(event){&lt;br /&gt;			this.flag = false;&lt;br /&gt;		}.bindAsEventListener(this));&lt;br /&gt;		&lt;br /&gt;		//event handlers RIGHT (or BOTTOM) scroll button&lt;br /&gt;		$(this.sid).down(&#39;.b_B&#39;).observe(&#39;mousedown&#39;, function(event){&lt;br /&gt;			this.flag=true;&lt;br /&gt;			new PeriodicalExecuter(function(pe){&lt;br /&gt;				if (this.flag) {&lt;br /&gt;					inner = $(this.sid).down(&#39;.s_inner&#39;);&lt;br /&gt;					cl_height = sizeToNumber(this.options.height);	// the scroller control area&lt;br /&gt;					delta = sizeToNumber(inner.style[this.direction]);	// how much the inner div was scrolled&lt;br /&gt;					if (this.options.type == &#39;horizontal&#39;) {&lt;br /&gt;						direction = &#39;clientWidth&#39;&lt;br /&gt;					} else if (this.options.type == &#39;vertical&#39;){&lt;br /&gt;						direction = &#39;clientHeight&#39;&lt;br /&gt;					}&lt;br /&gt;					re_size = this.area[direction];		// the real content size (the ideal size)&lt;br /&gt;					if (!(((delta * -1) + cl_height) &amp;gt;= re_size)) {&lt;br /&gt;						this.doScroll(this.options.amount * -1);&lt;br /&gt;					}&lt;br /&gt;				} else {&lt;br /&gt;				  	pe.stop();&lt;br /&gt;				}&lt;br /&gt;	    	}.bind(this), this.options.timeslice);&lt;br /&gt;		}.bindAsEventListener(this));&lt;br /&gt;		$(this.sid).down(&#39;.b_B&#39;).observe(&#39;mouseup&#39;, function(event){&lt;br /&gt;			this.flag = false;&lt;br /&gt;		}.bindAsEventListener(this));&lt;br /&gt;	},&lt;br /&gt;&lt;br /&gt;	doScroll:function(amount){&lt;br /&gt;		// do a scroll in the direction specified&lt;br /&gt;		delta = $(this.sid).down(&#39;.s_inner&#39;).style[this.direction];&lt;br /&gt;		if (!delta) {&lt;br /&gt;			delta = &#34;0px&#34;;&lt;br /&gt;		}&lt;br /&gt;		numeric_delta = sizeToNumber(delta) + amount;&lt;br /&gt;		if ( numeric_delta &amp;gt; 0) {return}&lt;br /&gt;		delta = numeric_delta + &#34;px&#34;;&lt;br /&gt;		$(this.sid).down(&#39;.s_inner&#39;).style[this.direction] = delta;&lt;br /&gt;	},&lt;br /&gt;	&lt;br /&gt;	scrollToElement:function(target_id){&lt;br /&gt;		// scroll to a specified id element inside the area&lt;br /&gt;		&lt;br /&gt;		switch (this.options.type) {&lt;br /&gt;			case &#39;vertical&#39;: &lt;br /&gt;				offsetType = &#39;offsetTop&#39;;&lt;br /&gt;				break;&lt;br /&gt;			case &#39;horizontal&#39;:&lt;br /&gt;				offsetType = &#39;offsetLeft&#39;;&lt;br /&gt;				break;&lt;br /&gt;		}&lt;br /&gt;		target_offset = $(target_id)[offsetType];	//distance to top of page for the target container&lt;br /&gt;		outer_offset = $(this.sid).down(&#39;.s_outer&#39;)[offsetType];&lt;br /&gt;		offset_from_top = target_offset - outer_offset;&lt;br /&gt;&lt;br /&gt;		this._to_scroll = offset_from_top;&lt;br /&gt;		this._incr = Math.ceil(Math.abs(offset_from_top) / 2);&lt;br /&gt;		new PeriodicalExecuter(&lt;br /&gt;			function(pe){&lt;br /&gt;				if (this._to_scroll &amp;lt;= this._incr) {&lt;br /&gt;					multiplier = 1&lt;br /&gt;				} else {&lt;br /&gt;					multiplier = -1&lt;br /&gt;				}&lt;br /&gt;				this.doScroll(multiplier * this._incr);&lt;br /&gt;				this._to_scroll += multiplier * this._incr;&lt;br /&gt;				this._incr = Math.ceil(this._incr / 2);&lt;br /&gt;				window.console.log(this._incr);				&lt;br /&gt;				if (this._to_scroll * multiplier * -1 &amp;lt;= this._incr) {&lt;br /&gt;					this.doScroll(-1 * this._to_scroll);	//the last scroll&lt;br /&gt;					pe.stop()&lt;br /&gt;				}&lt;br /&gt;			}.bind(this), &lt;br /&gt;			this.options.timeslice&lt;br /&gt;		);&lt;br /&gt;		return false;&lt;br /&gt;	}&lt;br /&gt;})&lt;br /&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Fresh meat for programmers</title>
      <link>/blog/2007/02/16/fresh-meat-for-programmers/</link>
      <pubDate>Fri, 16 Feb 2007 20:52:16 -0200</pubDate>
      
      <guid>/blog/2007/02/16/fresh-meat-for-programmers/</guid>
      <description>&lt;p&gt;I&#39;ve just discovered (or rediscovered) some resources that I think are important enough to highlight here.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Zope Corporation has several eggs that are not published in the svn.zope.org subversion repository, eggs located at &lt;a href=&#34;http://download.zope.org&#34;&gt;download.zope.org&lt;/a&gt;. There are several very interesting packages there, including some to build an intranet. I&#39;ll definately have a look at them.&lt;/li&gt;&lt;li&gt;I&#39;ve rediscovered &lt;a href=&#34;http://openjsan.org/&#34;&gt;OpenJSAN&lt;/a&gt;, a Javascript repository full of goodies.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;And its really nice &lt;a href=&#34;http://planet.openjsan.org/&#34;&gt;Planet Javascript&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using FCKEditor in Ajax views on Zope 3</title>
      <link>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</link>
      <pubDate>Mon, 12 Feb 2007 21:14:48 -0200</pubDate>
      
      <guid>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</guid>
      <description>&lt;p&gt;I&#39;m working on a new, AJAX based application for a friend, which will run under Zope 3. Being a rather &#34;CMS-ish&#34; type of application, I need to provide an easy way to edit some rich text fields. I&#39;ve settled on the FCKEditor, for which there is an &lt;a href=&#34;http://svn.zope.org/zope.html/&#34;&gt;already packaged library as zope.html&lt;/a&gt; (also depends on zope.file). I would have used TinyMCE, but I hit on a problem: all these visual editors have difficulties when loaded in &#34;dynamic loaded views&#34;. &lt;br /&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When using FCKEditor, everything seemed be fine for the first time, but the second time the editor was loaded, after the form was reloaded, there would be an error about a missing JavaScript object and the editor would fail to load. Form submission is handled by a function that serializes the form and makes an Ajax call, but the form object only contains the old values, not the new ones, as modified by the visual editor, so this had to be solved as well.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;I love TinyMCE for being able to scale down in terms of interface very easily, but I couldn&#39;t make it work in my scenario just as easily, so I gave up. The editor would load just fine, but when submitting the form, the entire web page would be replaced by a white page and would continue to keep loading, without any results. I&#39;ve found some mentioning of this problem on the web, and even in the TinyMCE wiki, but I couldn&#39;t work out what needs to be done in the short time that I had.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To solve the FCKEditor problems I had to do the following (&lt;a href=&#34;http://blog.zunch.com/post/Using_FCKEditor_in_AJAX.html&#34;&gt;blessed be the other bloggers of the Internet which already had to deal with this problem&lt;/a&gt;):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For the first problem, I&#39;ve inserted the following snippet in the form header:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;&lt;br /&gt;FCKeditorAPI = null;&lt;br /&gt;__FCKeditorNS = null;&lt;br /&gt;FCKTools = null;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;For the second problem, the form submit handler, I have the following code:&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;if (FCKeditorAPI) {&lt;br /&gt;       for (instance in FCKeditorAPI.__Instances) {&lt;br /&gt;           field_name = instance.toString();&lt;br /&gt;           field_value = FCKeditorAPI.GetInstance(field_name).GetXHTML();&lt;br /&gt;           sub_form[field_name].value = field_value;&lt;br /&gt;       }&lt;br /&gt;   }&lt;/pre&gt;&lt;p&gt;While searching the net for other editors that might not have this problem, I&#39;ve found this page that contains a &lt;a href=&#34;http://www.geniisoft.com/showcase.nsf/WebEditors&#34;&gt;big listing of all types of HTML visual editors&lt;/a&gt;. To tell the truth, in my use case, I&#39;d be happy with something like Epoz (and I even have checked it on the web), but the project seems dead and I think I would have had to strip the zope/plone integration out of it.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;After more then 6 or 7 years of not having to deal with JavaScript I&#39;m very very rusty. Even for the most simple questions - like: how do you get the properties of an object? how do you check if an object has a property? how do you check if an object exists - I had to look at references. But it&#39;s all part of the learning experience, which fortunately, is the part that I enjoy most.&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>