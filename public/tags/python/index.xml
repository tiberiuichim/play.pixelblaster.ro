<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on The Plone Expanse</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2019 Tiberiu Ichim</copyright>
    <lastBuildDate>Mon, 18 Dec 2017 16:22:22 +0200</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A quick and dirty mini-plugin system for Python</title>
      <link>/blog/2017/12/18/a-quick-and-dirty-mini-plugin-system-for-python/</link>
      <pubDate>Mon, 18 Dec 2017 16:22:22 +0200</pubDate>
      
      <guid>/blog/2017/12/18/a-quick-and-dirty-mini-plugin-system-for-python/</guid>
      <description>Inspired by Pyramid&amp;rsquo;s and venusian&amp;rsquo;s scan() call, I&amp;rsquo;ve reimplemented an auto-discovery system for plugins. The problem is simple.
Suppose we want to &amp;ldquo;register&amp;rdquo; a series of functions that can run automatically, based on aspects set in the calling environment. The simples and easiest solution is something like:
# in some module, as a global declaration: from somethingA import runner_A from somethingB import runner_B runners = [ runner_A, runner_B ] # then, maybe in some function: def main(): # .</description>
    </item>
    
    <item>
      <title>Running Pyramid with Flask, in the same Python process</title>
      <link>/blog/2017/08/14/running-pyramid-with-flask-in-the-same-python-process/</link>
      <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/08/14/running-pyramid-with-flask-in-the-same-python-process/</guid>
      <description>Thanks to the wonders of WSGI and well behaved frameworks, it is now trivial to mix and match applications and have them run in the same Python process.
Normally, in a production scenario, uwsgi would be used to split and map the URL spaces to different apps, but for development it is simpler to just use good old PythonPaste. In my case, I&amp;rsquo;ve wanted to have the RQ Dashboard (which is based on Flask) integrated with a Pyramid app that I&amp;rsquo;m working on.</description>
    </item>
    
    <item>
      <title>Restore missing blobs from blob cache</title>
      <link>/blog/2017/08/03/restore-missing-blobs-from-blob-cache/</link>
      <pubDate>Thu, 03 Aug 2017 13:40:28 +0000</pubDate>
      
      <guid>/blog/2017/08/03/restore-missing-blobs-from-blob-cache/</guid>
      <description>I had a curious case of missing-but-present blobs in an old Plone service, configured with a Zeo server and 2 Zope instances.
The root of the problem (I think) was that the blob folder configuration was broken: the Zope client instances were configured with shared blobs to &amp;ldquo;off&amp;rdquo;, but they were really sharing the same caching folder.
In the end, the blobs were loaded by the Zope services and everything appeared to be working, but when I&amp;rsquo;ve tried to move the blobstorage folder to a new machine, I ended up with missing blobs.</description>
    </item>
    
    <item>
      <title>Python packaging vs npm</title>
      <link>/blog/2017/02/22/python-packaging-vs-npm/</link>
      <pubDate>Wed, 22 Feb 2017 06:33:34 +0100</pubDate>
      
      <guid>/blog/2017/02/22/python-packaging-vs-npm/</guid>
      <description>I admit, Python packages are a bit more difficult to understand, for a newbie. I have witnessed this problem a lot, lately, when dealing with new people trying to learn the Python development process.
There is a mountain of information that needs to be climbed, to understand Python packages:
 the namespace concept the matter of OS security the full cycle of an application, from development to deployment and maintainance  And this are just basics, in addition to the distutils/setuptools/virtualenv/pip or zc.</description>
    </item>
    
    <item>
      <title>Another way to index category labels in categorization tasks</title>
      <link>/blog/2017/01/21/another-way-to-index-category-labels-in-categorization-tasks/</link>
      <pubDate>Sat, 21 Jan 2017 00:19:31 +0100</pubDate>
      
      <guid>/blog/2017/01/21/another-way-to-index-category-labels-in-categorization-tasks/</guid>
      <description>One common task in machine-based categorization tasks is to relabel data with a numeric value, an index, where before that data was labeled with a string.
The basic Python code would be something like this:
label_index = {} labels = [] for l in string_labels: if l not in label_index: label_index[l] = len(label_index) labels.append(label_index[l])&amp;gt;  While writing that bit of code from above, I realized that a word tokenizer can do the same thing.</description>
    </item>
    
    <item>
      <title>How to shuffle two arrays to the same order</title>
      <link>/blog/2017/01/20/how-to-shuffle-two-arrays-to-the-same-order/</link>
      <pubDate>Fri, 20 Jan 2017 17:24:40 +0100</pubDate>
      
      <guid>/blog/2017/01/20/how-to-shuffle-two-arrays-to-the-same-order/</guid>
      <description>This is a small recipe on how to get two arrays with the same shape (same length) shuffled with the same &amp;ldquo;random seed&amp;rdquo;. This is useful when the two arrays hold related data (for example, one holds values and the other one holds labels for those values).
It takes advantage of the fact that numpy arrays can be indexed with other arrays, something that seems really magical when compared to regular python arrays.</description>
    </item>
    
    <item>
      <title>A simple epub file renaming utility</title>
      <link>/blog/2012/01/16/a-simple-epub-file-renaming-utility/</link>
      <pubDate>Mon, 16 Jan 2012 15:32:10 -0200</pubDate>
      
      <guid>/blog/2012/01/16/a-simple-epub-file-renaming-utility/</guid>
      <description>I have a couple of epub files that have random names assigned to them, and I wanted to rename them based on their metadata, in the form Author - Title. Below is what I came up with:
#!/usr/bin/python from zipfile import ZipFile import lxml.etree import os.path import shutil import sys namespaces = { &#39;u&#39;:&#34;urn:oasis:names:tc:opendocument:xmlns:container&#34;, &#39;xsi&#39;:&#34;http://www.w3.org/2001/XMLSchema-instance&#34;, &#39;opf&#39;:&#34;http://www.idpf.org/2007/opf&#34;, &#39;dcterms&#39;:&#34;http://purl.org/dc/terms/&#34;, &#39;calibre&#39;:&#34;http://calibre.kovidgoyal.net/2009/metadata&#34;, &#39;dc&#39;:&#34;http://purl.org/dc/elements/1.1/&#34;, } def main(): if len(sys.argv) != 2: print &#34;Need a path.&#34; sys.</description>
    </item>
    
    <item>
      <title>Some issues with zc.recipe.egg&#39;s python option</title>
      <link>/blog/2010/05/12/some-issues-with-zc.recipe.eggs-python-option/</link>
      <pubDate>Wed, 12 May 2010 11:21:44 -0300</pubDate>
      
      <guid>/blog/2010/05/12/some-issues-with-zc.recipe.eggs-python-option/</guid>
      <description>I&#39;ve recently had to integrate a script/package into a Plone 2.5 buildout that runs on top of Python 2.4. Due to that package&#39;s dependence of a sane imaplib (and the one in Python 2.4 is buggy), I had to run the script with python2.6. To make a script run on a different python, you need to do:
[myscript] recipe = zc.regipe.egg eggs = &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; myegg &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IMAPClient python = python26 The python26 option is actually the name of a buildout part that configures the python executable path</description>
    </item>
    
    <item>
      <title>Another cause for buildout failures: system distributed Python</title>
      <link>/blog/2010/01/28/another-cause-for-buildout-failures-system-distributed-python/</link>
      <pubDate>Thu, 28 Jan 2010 21:29:31 -0200</pubDate>
      
      <guid>/blog/2010/01/28/another-cause-for-buildout-failures-system-distributed-python/</guid>
      <description>I&#39;ve had a buildout bootstrap process failure, this time a weird one, perhaps I should document the bug and report it.
The latest Ubuntu version which I have installed (Lucid Lynx) comes with a package called python-pkg-resources, which packages pkg_resources, which used to be available only through the setuptools distribution. Buildout&#39;s bootstrap.py tries to guess if Setuptools or Distribute are installed by checking the availability of pkg_resources; by guessing wrong it all comes to a crash at the end.</description>
    </item>
    
    <item>
      <title>Dear PyPi uploaders: don&#39;t use a download URL, upload your package instead!</title>
      <link>/blog/2010/01/28/dear-pypi-uploaders-dont-use-a-download-url-upload-your-package-instead/</link>
      <pubDate>Thu, 28 Jan 2010 20:57:23 -0200</pubDate>
      
      <guid>/blog/2010/01/28/dear-pypi-uploaders-dont-use-a-download-url-upload-your-package-instead/</guid>
      <description>I think this is the Python Index biggest mistake, the one which makes it unreliable for serious development environments: exposing package entries with no real package files and just a download URL. To see what I&#39;m talking about, just examine the PyPI records for BeautifulSoup or IPython, packages that are very common in buildouts. As soon as the author and publisher of that package has a hosting problem, the developer that uses that package also has a problem.</description>
    </item>
    
    <item>
      <title>ReportLab is one frustrating piece of software...</title>
      <link>/blog/2009/08/05/reportlab-is-one-frustrating-piece-of-software.../</link>
      <pubDate>Wed, 05 Aug 2009 11:39:26 -0300</pubDate>
      
      <guid>/blog/2009/08/05/reportlab-is-one-frustrating-piece-of-software.../</guid>
      <description>I&#39;m starting to grow a strong dislike to it, enough to steer me off Python to JVM, with Jython or Scala. Case in point: its authors considered that it&#39;s appropriate to overload the Paragraph class from the platypus module, to make it accept a form of &#34;xml&#34;. There&#39;s no switch to disable this behavior and its xml handling is something straight out of the 90&#39;s: no namespaces, no validation. What happens for example, when you&#39;re trying to make a paragraph with the text:</description>
    </item>
    
    <item>
      <title>Using mechanize to process protected Plone pages</title>
      <link>/blog/2009/02/15/using-mechanize-to-process-protected-plone-pages/</link>
      <pubDate>Sun, 15 Feb 2009 16:04:39 -0200</pubDate>
      
      <guid>/blog/2009/02/15/using-mechanize-to-process-protected-plone-pages/</guid>
      <description>One of my long-running projects involves a workflow where content is produced in a Plone site, with the data later extracted and processed in various ways (including scripting Scribus to layout this data in a book). Initially the site where the content was produced wasn&#39;t protected, so I could run a simple urllib script to download the content and process it using lxml. A recent change in the workflow security settings meant this script didn&#39;t work anymore and I had to remember how to login into a Plone site using urllib2.</description>
    </item>
    
    <item>
      <title>Specific imports versus module imports in Python</title>
      <link>/blog/2008/12/03/specific-imports-versus-module-imports-in-python/</link>
      <pubDate>Wed, 03 Dec 2008 12:05:20 -0200</pubDate>
      
      <guid>/blog/2008/12/03/specific-imports-versus-module-imports-in-python/</guid>
      <description>I&#39;ve always been a fan of explicit, separate imports in Python, vs generic module imports. Maybe it&#39;s because I like things to be explicit, or I&#39;ve been spoiled by the way Eclipse Pydev deals with auto-importing, but I have an aversion towards generic module imports. To keep the code style consistent, I even rewrite to this style any foreign code that ends up in my code.
Specifically, I&#39;m talking about:</description>
    </item>
    
    <item>
      <title>A wxPython based tagcloud renderer</title>
      <link>/blog/2008/11/01/a-wxpython-based-tagcloud-renderer/</link>
      <pubDate>Sat, 01 Nov 2008 19:36:20 -0200</pubDate>
      
      <guid>/blog/2008/11/01/a-wxpython-based-tagcloud-renderer/</guid>
      <description>This is a small example app that will render a tag cloud with various font weights/height, based on their weight in the cloud. Not much to say here, hope it is useful to someone. It has actually been easier to design and create then expected, the only difficulty was in figuring out how to resize the buttons based on the size of their label. The algorithm could be improved to generate the cloud in a single pass, but I&#39;m not gonna bother, it works fast enough right now.</description>
    </item>
    
    <item>
      <title>RichText control with wxpython: saving, loading and converting from internal XML to HTML</title>
      <link>/blog/2008/10/08/richtext-control-with-wxpython-saving-loading-and-converting-from-internal-xml-to-html/</link>
      <pubDate>Wed, 08 Oct 2008 17:14:46 -0300</pubDate>
      
      <guid>/blog/2008/10/08/richtext-control-with-wxpython-saving-loading-and-converting-from-internal-xml-to-html/</guid>
      <description>I tend to be an angry caveman these days (see my previous post) and this doesn&#39;t lead to too much clear thinking. I&#39;ve been dealing with the wx.richtext.RichTextCtrl for the past couple of days and I think I&#39;m now close to finishing the tasks that I set myself to do with it. I&#39;m trying to run a bunch of richtext controls on the same page, that would increase their size and show a toolbar when focused.</description>
    </item>
    
    <item>
      <title>Workingenv, setuptools and svn 1.5 redux</title>
      <link>/blog/2008/09/14/workingenv-setuptools-and-svn-1.5-redux/</link>
      <pubDate>Sun, 14 Sep 2008 10:45:41 -0300</pubDate>
      
      <guid>/blog/2008/09/14/workingenv-setuptools-and-svn-1.5-redux/</guid>
      <description>I&#39;m back to dealing with the incompatibility between setuptools and svn 1.5 which I have installed. Last time I&#39;ve solved the problem by doing a svn checkout of http://svn.python.org/projects/sandbox/branches/setuptools-0.6/ and running sudo python setup.py install. Now I&#39;m trying to do setup a virtualenv to play with repoze.catalog and I&#39;m hitting the same problem. Of course, virtualenv comes with a hardcoded setuptools package and so it will setup a &#34;broken&#34; setuptools in the virtual environment.</description>
    </item>
    
    <item>
      <title>Bug in PyPi</title>
      <link>/blog/2008/08/22/bug-in-pypi/</link>
      <pubDate>Fri, 22 Aug 2008 16:16:07 -0300</pubDate>
      
      <guid>/blog/2008/08/22/bug-in-pypi/</guid>
      <description>The zope.app.form PyPi page looks awful, it should be fixed. Who&#39;s fault is that? Django, the framework that sits underneath (AFAIK), or the docutils libraries that probably parse the RST pages?</description>
    </item>
    
    <item>
      <title>Monty Python sketches and download script</title>
      <link>/blog/2008/01/28/monty-python-sketches-and-download-script/</link>
      <pubDate>Mon, 28 Jan 2008 12:32:16 -0200</pubDate>
      
      <guid>/blog/2008/01/28/monty-python-sketches-and-download-script/</guid>
      <description>A friend pointed me to a page with many many links to Monty Python sketches videos. Being a Monty Python fan, I&#39;ve countered with this script:
#!/usr/bin/python2.4
downloader = &#34;/home/tibi/Software/youtube-dl.py &#39;%s&#39; -o &#39;%s&#39;&#34;
url = &#34;http://onemansblog.com/2006/12/01/a-compendium-of-150-monty-python-sketches/&#34;
import lxml.html
import urllib
import os
content = urllib.urlopen(url)
etree = lxml.html.parse(content)
links = etree.xpath(&#39;//ol/li/a&#39;)
for link in links:
print &#34;Downloading &#34;, link.text
cmd = downloader % (link.get(&#39;href&#39;), link.text + &#39;.flv&#39;)
print os.popen(cmd).read() It needs the YouTube downloader script and lxml 2.</description>
    </item>
    
    <item>
      <title>Trying out eggs and applications with workingenv, without poluting the system python</title>
      <link>/blog/2007/11/14/trying-out-eggs-and-applications-with-workingenv-without-poluting-the-system-python/</link>
      <pubDate>Wed, 14 Nov 2007 17:21:44 -0200</pubDate>
      
      <guid>/blog/2007/11/14/trying-out-eggs-and-applications-with-workingenv-without-poluting-the-system-python/</guid>
      <description>Ever since I&#39;ve started working with zc.buildout I&#39;ve grown to love the whole &#34;environment as project&#34; setup that it provides: eggs and python packages are installed and contained in the buildout and they don&#39;t polute the system packages. There is another alternative: workingenv, which, while simpler in scope, it is easier to setup and use. For example, recently I&#39;ve wanted to see if lxml 2.0 can be installed in my system.</description>
    </item>
    
    <item>
      <title>Scripting Adobe Indesign with Python</title>
      <link>/blog/2007/08/15/scripting-adobe-indesign-with-python/</link>
      <pubDate>Wed, 15 Aug 2007 11:45:32 -0300</pubDate>
      
      <guid>/blog/2007/08/15/scripting-adobe-indesign-with-python/</guid>
      <description>I&#39;m working on a larger project, with various components and one of the components is producing content with Plone which is then to be imported into Indesign, where each item from Plone gets to fill in a 2 page template. There are about 500 of these items, so this can&#39;t be done manually. InDesign is stupid (or maybe plugin friendly / commercially clever) enough that, even though it can import XML files and even perform XSLT transformations on them and has a &#34;</description>
    </item>
    
    <item>
      <title>Running Python based software in the GPU?</title>
      <link>/blog/2007/05/25/running-python-based-software-in-the-gpu/</link>
      <pubDate>Fri, 25 May 2007 09:56:45 -0300</pubDate>
      
      <guid>/blog/2007/05/25/running-python-based-software-in-the-gpu/</guid>
      <description>I&#39;m not a GFX or 3d programmer, but looking at this blog entry, I understand that these guys are getting ready a way to run Python based software in the GPU. I wonder what kind of speed improvements can be achieved through that, although I fear that it&#39;s only going to work for numeric type of programs.</description>
    </item>
    
    <item>
      <title>Embeding the Gecko engine in Python applications</title>
      <link>/blog/2007/03/10/embeding-the-gecko-engine-in-python-applications/</link>
      <pubDate>Sat, 10 Mar 2007 18:28:29 -0200</pubDate>
      
      <guid>/blog/2007/03/10/embeding-the-gecko-engine-in-python-applications/</guid>
      <description>I&#39;ve got to deploy a new desktop based application, created, of course, with Zope 3. When you&#39;ve got a hammer, everything looks like a nail, indeed. This application uses HTML and CSS as its presentation layer (right, it&#39;s a web page), with a bit of Ajax thrown in. Due do time constraints, I&#39;m not even trying to get it to work properly on Internet Explorer (although it looks about 90% right, but I have some problems with Javascript), so I won&#39;t be embeding the Internet Explorer this time engine in my Python application, I&#39;ll just try to get the Gecko rendering engine, the one used in Firefox.</description>
    </item>
    
    <item>
      <title>Zope buildout quickstart</title>
      <link>/blog/2007/02/10/zope-buildout-quickstart/</link>
      <pubDate>Sat, 10 Feb 2007 22:19:56 -0200</pubDate>
      
      <guid>/blog/2007/02/10/zope-buildout-quickstart/</guid>
      <description>One of the bigger players in the latest move to automate Plone and Zope development and deployment has been buildout, so I figured it&#39;s about time to start learning it and see how it can help me. I&#39;m writing this short recipe as I progress through learning buildout to help me remember this stuff later on.
Installing buildoutThe easiest way to install buildout is to get easy_install (a manager for python packages) on your system.</description>
    </item>
    
    <item>
      <title>One liner to get the common elements of several lists</title>
      <link>/blog/2006/11/06/one-liner-to-get-the-common-elements-of-several-lists/</link>
      <pubDate>Mon, 06 Nov 2006 23:14:38 -0200</pubDate>
      
      <guid>/blog/2006/11/06/one-liner-to-get-the-common-elements-of-several-lists/</guid>
      <description>While doing an exercise with a mockup catalog and indexes, I ran into the problem of filtering several lists and returning the common elements from the list. The following example demonstrate the usage of reduce(), one of the functional programming constructs that are less common and obvious in their usage.
&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; b = [2,3,4,5]
&amp;gt;&amp;gt;&amp;gt; c = [1,2,4,6]
&amp;gt;&amp;gt;&amp;gt; d = [0,2,3]
&amp;gt;&amp;gt;&amp;gt; z = [a,b,c,d]</description>
    </item>
    
    <item>
      <title>Catching and printing python exceptions</title>
      <link>/blog/2006/10/27/catching-and-printing-python-exceptions/</link>
      <pubDate>Fri, 27 Oct 2006 00:16:13 -0300</pubDate>
      
      <guid>/blog/2006/10/27/catching-and-printing-python-exceptions/</guid>
      <description>&amp;gt;&amp;gt;&amp;gt; import traceback, sys
&amp;gt;&amp;gt;&amp;gt; try:
... 1/0
... except:
... traceback.print_exc(sys.exc_info())
...
Traceback (most recent call last):
File &#34;&amp;lt;stdin&amp;gt;&#34;, line 2, in ?
ZeroDivisionError: integer division or modulo by zero
&amp;gt;&amp;gt;&amp;gt; </description>
    </item>
    
    <item>
      <title>Adaptation explained</title>
      <link>/blog/2006/09/10/adaptation-explained/</link>
      <pubDate>Sun, 10 Sep 2006 10:52:39 -0300</pubDate>
      
      <guid>/blog/2006/09/10/adaptation-explained/</guid>
      <description>It seems that there&#39;s a proposal to introduce adaptation in Python 3000, which sparked a discussion and a nice introduction to adaptation on the python-dev list. Another explanation here.</description>
    </item>
    
    <item>
      <title>Printing frameworks and wxPython</title>
      <link>/blog/2006/09/06/printing-frameworks-and-wxpython/</link>
      <pubDate>Wed, 06 Sep 2006 16:48:34 -0300</pubDate>
      
      <guid>/blog/2006/09/06/printing-frameworks-and-wxpython/</guid>
      <description>As hard as I have tried to find, there&#39;s no good printing framework for wxPython. wxEasyPrinting sucks so much for anything more then simple text (for example, the table cells don&#39;t support specifying a height). Generating PDF files with a toolkit such as ReportLab (even with Platypus) is harder then it should be, especially when there&#39;s no ready made higher level framework. This page explores some of the common printing solutions on Windows.</description>
    </item>
    
    <item>
      <title>Creating and managing a Windows service (part 4)</title>
      <link>/blog/2006/08/23/creating-and-managing-a-windows-service-part-4/</link>
      <pubDate>Wed, 23 Aug 2006 16:44:06 -0300</pubDate>
      
      <guid>/blog/2006/08/23/creating-and-managing-a-windows-service-part-4/</guid>
      <description>The final step is to &#34;compile&#34; everything into Windows executables using py2exe. For this I have the following setup.py file:
from distutils.core import setup
import py2exe
import sys
# If run without args, build executables, in quiet mode.
if len(sys.argv) == 1:
sys.argv.append(&#34;py2exe&#34;)
sys.argv.append(&#34;-q&#34;)
class Target:
def __init__(self, **kw):
self.__dict__.update(kw)
# for the versioninfo resources
self.version = &#34;0.1.0&#34;
self.company_name = &#34;Pixelblaster Romania&#34;
self.copyright = &#34;Copyright 2006 Pixelblaster Romania&#34;
self.name = &#34;</description>
    </item>
    
    <item>
      <title>Creating and managing a Windows service (part 3)</title>
      <link>/blog/2006/08/23/creating-and-managing-a-windows-service-part-3/</link>
      <pubDate>Wed, 23 Aug 2006 16:34:50 -0300</pubDate>
      
      <guid>/blog/2006/08/23/creating-and-managing-a-windows-service-part-3/</guid>
      <description>This third part shows the code needed to start/stop and set the startup type for the service. Actually, most of the necessary code sits in a ActiveState python-cookbook recipe, found here.
So, the code, using the recipe is simple (well, except that it&#39;s presented as a wxwidgets windows):
#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1cvs on Mon Aug 21 19:12:22 2006
import wx
from dlgControlerMainFrame import dlgControlerMainFrame</description>
    </item>
    
    <item>
      <title>Creating and managing a Windows service (part 2)</title>
      <link>/blog/2006/08/23/creating-and-managing-a-windows-service-part-2/</link>
      <pubDate>Wed, 23 Aug 2006 15:33:47 -0300</pubDate>
      
      <guid>/blog/2006/08/23/creating-and-managing-a-windows-service-part-2/</guid>
      <description>This part of the recipe shows the python code needed to create (install) the Windows service. I didn&#39;t write most of this, I just found it somewhere on the internet. Credit due to the original author.
import sys
import win32service, win32serviceutil
from config import SERVICE_NAME, SERVICE_DISPLAY_NAME, SOFTWAREPATH
service_path = &#34;%s\myservice.exe&#34; % SOFTWAREPATH
def debug(msg):
print msg
def removeSvc():
debug(&#39;called removeSvc()&#39;)
win32serviceutil.RemoveService(SERVICE_NAME)
debug(&#39;...service was removed&#39;)
def installSvc():
debug(&#39;installSvc()&#39;)
hscm = win32service.OpenSCManager(None,None,win32service.SC_MANAGER_ALL_ACCESS)</description>
    </item>
    
    <item>
      <title>Creating and managing a Windows service (part 1)</title>
      <link>/blog/2006/08/23/creating-and-managing-a-windows-service-part-1/</link>
      <pubDate>Wed, 23 Aug 2006 15:29:14 -0300</pubDate>
      
      <guid>/blog/2006/08/23/creating-and-managing-a-windows-service-part-1/</guid>
      <description>I&#39;m starting a longer piece on creating and managing a python based Windows service, so look for the other parts in this blog for the complete &#34;recipe&#34;
First, our tools: py2exe has, among its deployment targets, a &#34;windows service&#34; option, so we&#39;ll need that. To manage the service and interact with the Windows event log, the Python win32 extension is needed. Py2exe has a sample service in the samples/advanced folder, on which I&#39;ve based my code.</description>
    </item>
    
    <item>
      <title>Capturing print statements output</title>
      <link>/blog/2006/08/23/capturing-print-statements-output/</link>
      <pubDate>Wed, 23 Aug 2006 13:57:21 -0300</pubDate>
      
      <guid>/blog/2006/08/23/capturing-print-statements-output/</guid>
      <description>Sometimes you have code that has a lot of print statements, which are helping you with debugging. But what happens if you try to port that code to an environment without a console? In the best case, you won&#39;t see the prints anymore, in the worse case, the code will fail because there&#39;s no &#34;valid file descriptor&#34; to which to write.
The solution to this problem is to replace python&#39;s stdout file, which will enable the code output to be recorded and maybe logged for debugging purposes.</description>
    </item>
    
    <item>
      <title>Creating arbitrary objects in the current module namespace</title>
      <link>/blog/2006/08/16/creating-arbitrary-objects-in-the-current-module-namespace/</link>
      <pubDate>Wed, 16 Aug 2006 20:26:30 -0300</pubDate>
      
      <guid>/blog/2006/08/16/creating-arbitrary-objects-in-the-current-module-namespace/</guid>
      <description>This short recipe will show how to create arbitrary named objects in the current module namespace. Either globals() or locals() can be used for the task, depending on the namespace where the variables have to be created (global or local). &amp;gt;&amp;gt;&amp;gt; for i in range(10):
&amp;gt;&amp;gt;&amp;gt; globals()[&#39;test%s&#39; % i] = i
&amp;gt;&amp;gt;&amp;gt; print test0
0
&amp;gt;&amp;gt;&amp;gt; print test1
1
 </description>
    </item>
    
    <item>
      <title>Small tip when using wxWidgets</title>
      <link>/blog/2006/08/13/small-tip-when-using-wxwidgets/</link>
      <pubDate>Sun, 13 Aug 2006 18:09:58 -0300</pubDate>
      
      <guid>/blog/2006/08/13/small-tip-when-using-wxwidgets/</guid>
      <description>Always put your controls in a sizer inside a panel. So, the actual tree would be frame &amp;gt; sizer &amp;gt; panel &amp;gt; sizer &amp;gt; ... controls
The reason is that the panel component will enable tab traversal. Also, the panel can so be used to group the widgets into logical groups, to facilitate traversing them with the tab key. Oh, did I mention wxGlade (from cvs) rules? </description>
    </item>
    
    <item>
      <title>I don&#39;t like the new python.org webpage</title>
      <link>/blog/2006/08/12/i-dont-like-the-new-python.org-webpage/</link>
      <pubDate>Sat, 12 Aug 2006 13:50:59 -0300</pubDate>
      
      <guid>/blog/2006/08/12/i-dont-like-the-new-python.org-webpage/</guid>
      <description>When it first appeared, I said &#34;heh&#34;, but now I don&#39;t like the new python.org webpage. The new page certainly looks a lot more &#39;designed&#39;, but the old one was certainly cute, and had the classic python logo. Where&#39;s that lovely snake? My concern is the overall feel of the page, not its content or internal organization. The present colors are too &#34;4 years ago&#34;, I especially hate that blueish color.</description>
    </item>
    
  </channel>
</rss>