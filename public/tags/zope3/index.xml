<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zope3 on The Plone Expanse</title>
    <link>/tags/zope3/</link>
    <description>Recent content in Zope3 on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2017 Tiberiu Ichim</copyright>
    <lastBuildDate>Wed, 31 Aug 2016 08:12:43 -0200</lastBuildDate>
    
	<atom:link href="/tags/zope3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abusing Plone Content Rules to allow Site Admin customizations of sent emails</title>
      <link>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</link>
      <pubDate>Wed, 31 Aug 2016 08:12:43 -0200</pubDate>
      
      <guid>/blog/2016/08/31/abusing-plone-content-rules-to-allow-site-admin-customizations-of-sent-emails/</guid>
      <description>This would be a sort of tutorial on how to implement a new plone.app.contentrules Trigger Event, how to write a new plone.stringinterp variable substitutor and how to trigger the event from a browser page (or z3c.form).
This allows configuring a new trigger event from the Content Rules Plone control panel configlet and to assign a new Email action, with customizable body template.
Let&#39;s say our task is to implement a contact form:</description>
    </item>
    
    <item>
      <title>Getting the superclasses for a python object</title>
      <link>/blog/2011/06/28/getting-the-superclasses-for-a-python-object/</link>
      <pubDate>Tue, 28 Jun 2011 17:08:06 -0300</pubDate>
      
      <guid>/blog/2011/06/28/getting-the-superclasses-for-a-python-object/</guid>
      <description>Zope 2 (and Plone) persistent objects usually have an intricate inheritance tree. Finding what classes an object inherits can be a time consuming task, hunting through the various eggs for the relevant source code. Below is a little snippet that shows how to easily get the list of superclasses:
(Pdb) pp type(ff).mro() (&amp;lt;class &#39;plone.app.blob.subtypes.image.ExtensionBlobField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;archetypes.schemaextender.field.TranslatableExtensionField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;archetypes.schemaextender.field.BaseExtensionField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;plone.app.blob.field.BlobField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.ObjectField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.Field&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Layer.DefaultLayerContainer&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;plone.app.blob.mixins.ImageFieldMixin&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.Archetypes.Field.ImageField&#39;&amp;gt;, &amp;nbsp;&amp;lt;class &#39;Products.</description>
    </item>
    
    <item>
      <title>A miniguide to Dolmen packages</title>
      <link>/blog/2010/09/19/a-miniguide-to-dolmen-packages/</link>
      <pubDate>Sun, 19 Sep 2010 22:16:36 -0300</pubDate>
      
      <guid>/blog/2010/09/19/a-miniguide-to-dolmen-packages/</guid>
      <description>I&#39;m finally starting a long-overdue project which I have decided to do with Dolmen. As usual, I start by studying its source code and the packages that are available for it. By itself it can will get me about 60% with the requirements for my project, so it&#39;s a pretty good starting base. I plan to also study and use some of the menhir.* packages, which are pretty good as generic CMS content types.</description>
    </item>
    
    <item>
      <title>Test if developer mode is set in Zope 3 and Grok</title>
      <link>/blog/2010/01/15/test-if-developer-mode-is-set-in-zope-3-and-grok/</link>
      <pubDate>Fri, 15 Jan 2010 11:29:22 -0200</pubDate>
      
      <guid>/blog/2010/01/15/test-if-developer-mode-is-set-in-zope-3-and-grok/</guid>
      <description>I&#39;ve started an application that uses Dolmen, a lightweight CMS built on top of Grok, and I want to be able to &#34;rollup&#34; the megrok.resource files based on the devmode setting that was set in the zope.conf file. After a bit of digging, I came up with this code that tells me the current devmode setting for the running instance:
from zope.app.applicationcontrol.applicationcontrol import applicationController from zope.app.applicationcontrol.interfaces import IRuntimeInfo def get_debug_mode(): &amp;nbsp;&amp;nbsp;&amp;nbsp; &#34;</description>
    </item>
    
    <item>
      <title>Making peace with the system-wide installed zope.interface</title>
      <link>/blog/2009/02/16/making-peace-with-the-system-wide-installed-zope.interface/</link>
      <pubDate>Mon, 16 Feb 2009 11:31:15 -0200</pubDate>
      
      <guid>/blog/2009/02/16/making-peace-with-the-system-wide-installed-zope.interface/</guid>
      <description>While testing software to play music from a computer on my network, I have discovered Elisa, which is a wonderful piece of software built in Python and zope.interface. The package manager helpfully installed a python-zopeinterface package, which turned out to break one of the apps I&#39;ve been working on (one of the packages that is used depends on a more recent version of zope.interface and breaks with a missing object import).</description>
    </item>
    
    <item>
      <title>Variable keys in dictionaries with Page Templates TALES syntax</title>
      <link>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</link>
      <pubDate>Wed, 11 Feb 2009 19:45:41 -0200</pubDate>
      
      <guid>/blog/2009/02/11/variable-keys-in-dictionaries-with-page-templates-tales-syntax/</guid>
      <description>I admit, I didn&#39;t knew this until now. In the following construction:
&amp;lt;div tal:content=&#34;somedict/keyname/someattr&#34; /&amp;gt; &#34;keyname&#34; is taken as a string, it&#39;s the literal name of the key for the somedict mapping. To use a variable instead of the literal value of the key name, I used to do:
&amp;lt;div tal:content=&#34;python somedict[key].someattr&#34; /&amp;gt; Browsing through the zope.app.catalog code, I saw that there&#39;s actually a way to use the TALES syntax:</description>
    </item>
    
    <item>
      <title>Reset the generations level for a Zope application</title>
      <link>/blog/2009/02/05/reset-the-generations-level-for-a-zope-application/</link>
      <pubDate>Thu, 05 Feb 2009 20:21:12 -0200</pubDate>
      
      <guid>/blog/2009/02/05/reset-the-generations-level-for-a-zope-application/</guid>
      <description>While developing an application and writing some migration code (using zope.app.generations), I had the need to reset the generation number recorded in the database for my application to a version lower than the current generation number (because my generation code didn&#39;t run properly and I didn&#39;t want to create bogus generation files). To solve this issue, in a pdb prompt I had to run:
(Pdb) db = self.request.publication.db (Pdb) conn = db.</description>
    </item>
    
    <item>
      <title>LearningJourney: A Zope 3 tutorial</title>
      <link>/blog/2009/01/16/learningjourney-a-zope-3-tutorial/</link>
      <pubDate>Fri, 16 Jan 2009 20:16:42 -0200</pubDate>
      
      <guid>/blog/2009/01/16/learningjourney-a-zope-3-tutorial/</guid>
      <description>Last year, in December, I held a 3 day Zope 3 training for about 10 Zope 2 and Python programmers. For this training I had prepared a 50 pages booklet with some tutorials and reference information (most of it written by me especially for this occasion). The feedback was pretty positive, but only time will tell if I was succesful or not with my training.
I have published the training material on Google Code in a project called z3ergo.</description>
    </item>
    
    <item>
      <title>Bug in PyPi</title>
      <link>/blog/2008/08/22/bug-in-pypi/</link>
      <pubDate>Fri, 22 Aug 2008 16:16:07 -0300</pubDate>
      
      <guid>/blog/2008/08/22/bug-in-pypi/</guid>
      <description>The zope.app.form PyPi page looks awful, it should be fixed. Who&#39;s fault is that? Django, the framework that sits underneath (AFAIK), or the docutils libraries that probably parse the RST pages?</description>
    </item>
    
    <item>
      <title>Hosting Plone and Zope 3 applications using nginx</title>
      <link>/blog/2008/07/11/hosting-plone-and-zope-3-applications-using-nginx/</link>
      <pubDate>Fri, 11 Jul 2008 10:31:21 +0000</pubDate>
      
      <guid>/blog/2008/07/11/hosting-plone-and-zope-3-applications-using-nginx/</guid>
      <description>I&#39;m doing a setup on a new server, I&#39;ve decided to replace the default Apache 2.2 with an nginx http server. The setup which is needed for Zope 3 and Plone applications is the following:
[buildout] parts = &amp;nbsp;&amp;nbsp;&amp;nbsp; nginx &amp;nbsp;&amp;nbsp;&amp;nbsp; nginxctl [nginx] recipe = gocept.cmmi url = http://sysoev.ru/nginx/nginx-0.7.6.tar.gz md5sum = ae7ce6f66a2cf5a5970d9a9a0da0cf7d [nginxctl] recipe = gocept.nginx hostname = localhost port = 80 configuration = &amp;nbsp;&amp;nbsp;&amp;nbsp; worker_processes 1; &amp;nbsp;&amp;nbsp;&amp;nbsp; events { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; worker_connections 1024; &amp;nbsp;&amp;nbsp;&amp;nbsp; } &amp;nbsp;&amp;nbsp;&amp;nbsp; http { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upstream z3 { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; server 127.</description>
    </item>
    
    <item>
      <title>Using views as information mixins in templates</title>
      <link>/blog/2008/06/01/using-views-as-information-mixins-in-templates/</link>
      <pubDate>Sun, 01 Jun 2008 22:30:29 -0300</pubDate>
      
      <guid>/blog/2008/06/01/using-views-as-information-mixins-in-templates/</guid>
      <description>This may be basic trick for some, a non-obvious usage of views for others, who knows, I&#39;m documenting it here anyway. I&#39;ve been using this technique for quite some time without giving it much thought.
There are times when I have an object in a template. I want to display information associated with that object. This information is already coded in a @@detail view on this object. Suppose this example (in mostly pseudocode):</description>
    </item>
    
    <item>
      <title>In case you&#39;re having problems installing ssl-for-setuptools...</title>
      <link>/blog/2008/04/15/in-case-youre-having-problems-installing-ssl-for-setuptools.../</link>
      <pubDate>Tue, 15 Apr 2008 19:23:09 -0300</pubDate>
      
      <guid>/blog/2008/04/15/in-case-youre-having-problems-installing-ssl-for-setuptools.../</guid>
      <description>I&#39;ve stumbled on this error when trying to install a easyshop buildout:
Exception: No SSL support found
An error occured when trying to install ssl-for-setuptools 1.10.Look above this message for any errors thatwere output by easy_install.
While:
Installing instance.
Getting distribution for &#39;ssl-for-setuptools&#39;.
Error: Couldn&#39;t install: ssl-for-setuptools 1.10
 After scratching my head for a while, I&#39;ve found the solution:
# apt-get install libssl-dev </description>
    </item>
    
    <item>
      <title>Why do I use Zope 3?</title>
      <link>/blog/2008/03/19/why-do-i-use-zope-3/</link>
      <pubDate>Wed, 19 Mar 2008 19:33:08 -0200</pubDate>
      
      <guid>/blog/2008/03/19/why-do-i-use-zope-3/</guid>
      <description>I&#39;m in the process of beginning a new project and I&#39;m debating on what framework to use. Of course it will be Zope 3, but why do I use it. Well, it&#39;s sure something that has to do with these facts:
it&#39;s open source, with a strong, mature community around itwhile it&#39;s still actively development, it has a stable API
 it&#39;s written in Python, one of the easiest and most powerful languagesit&#39;s built around a component architecture, which means writing pluggable applications comes naturallysolves the problem of publishing objects through the webeverything is transaction based.</description>
    </item>
    
    <item>
      <title>Template layout options when developing with Zope 3</title>
      <link>/blog/2007/12/17/template-layout-options-when-developing-with-zope-3/</link>
      <pubDate>Mon, 17 Dec 2007 18:16:36 -0200</pubDate>
      
      <guid>/blog/2007/12/17/template-layout-options-when-developing-with-zope-3/</guid>
      <description>When developing a Zope 2 site, the way the templates would be laid out is obvious: create a template for the site layout, use macros and slots to fill in that template and use the CMF skin overriding mechanism when you have to customize a certain template or Python script for another skin. Plone has been using this mechanism very successfully.
With Zope 3 the path is not very clear. There are several mechanisms, each with its advantages and disadvantages.</description>
    </item>
    
    <item>
      <title>The problem with buildout and PyDev</title>
      <link>/blog/2007/09/09/the-problem-with-buildout-and-pydev/</link>
      <pubDate>Sun, 09 Sep 2007 12:40:53 -0300</pubDate>
      
      <guid>/blog/2007/09/09/the-problem-with-buildout-and-pydev/</guid>
      <description>Lately it has been possible to develop and simply deploy a Zope 3 based application by organizing code in a single Python package that uses zope3 packages as dependency, plus a buildout recipe that creates a running zope 3 instance based on these eggs. For anyone using Eclipse + PyDev, this approach has the following inconvenience: the `eggs` folder can&#39;t be properly imported as external source folder for the project. Eclipse knows about eggs, but only when they&#39;re in marked in a .</description>
    </item>
    
    <item>
      <title>Using lovely.tag in an edit form (or advanced usage for zope.formlib&#39;s EditForm)</title>
      <link>/blog/2007/05/24/using-lovely.tag-in-an-edit-form-or-advanced-usage-for-zope.formlibs-editform/</link>
      <pubDate>Thu, 24 May 2007 17:54:23 -0300</pubDate>
      
      <guid>/blog/2007/05/24/using-lovely.tag-in-an-edit-form-or-advanced-usage-for-zope.formlibs-editform/</guid>
      <description>lovely.tag is a nice package that has almost all the functionality one can desire from a tagging engine. Recently I needed to integrate it with some of my content types (but not exactly as a tagging widget, but as a global registry for a global vocabulary), so I&#39;ve created a couple of new widgets (an AJAX based multi-autocomplete one, based on z3c.widget.autocomplete and an add/remove widget, based on Plone&#39;s 3rd party AddRemoveWidget).</description>
    </item>
    
    <item>
      <title>Passing data to viewlets from the parent template</title>
      <link>/blog/2007/04/19/passing-data-to-viewlets-from-the-parent-template/</link>
      <pubDate>Thu, 19 Apr 2007 19:58:14 -0300</pubDate>
      
      <guid>/blog/2007/04/19/passing-data-to-viewlets-from-the-parent-template/</guid>
      <description>To insert a rendered viewlet manager into a page, one uses something like &#34;tal:replace=&#34;structure provider: ILeftSide&#34;. Of course, viewlet managers are providers, they implement the IContentProvider interface and are looked up with this interface in the &#39;provider&#39; TALES handler. One particular trick that content providers do is that they allow insertion of TAL data from the template, to make it accessible inside the content provider class. A sort of &#34;parameters&#34;, as it is detailed in the README.</description>
    </item>
    
    <item>
      <title>Traversing from Python a Zope 3 page that uses the traverse subpath</title>
      <link>/blog/2007/04/13/traversing-from-python-a-zope-3-page-that-uses-the-traverse-subpath/</link>
      <pubDate>Fri, 13 Apr 2007 11:38:52 -0300</pubDate>
      
      <guid>/blog/2007/04/13/traversing-from-python-a-zope-3-page-that-uses-the-traverse-subpath/</guid>
      <description>Getting the traverse subpath in Zope 2 is relatively easy and involves almost no tricks. Doing the same thing in Zope3 is a bit more involved, but nevertheless still relatively easy. What might not be obvious at first is how to traverse to the page from Python code. Call me slow, but it took me about 2 minutes to think of the solution.
The idea is: I have a page along these lines: http://localhost/site/tips/page_context/next.</description>
    </item>
    
    <item>
      <title>One issue using Prototype&#39;s Ajax form submission with Zope 3</title>
      <link>/blog/2007/03/25/one-issue-using-prototypes-ajax-form-submission-with-zope-3/</link>
      <pubDate>Sun, 25 Mar 2007 16:08:02 -0300</pubDate>
      
      <guid>/blog/2007/03/25/one-issue-using-prototypes-ajax-form-submission-with-zope-3/</guid>
      <description>I&#39;ve found a weird issue while trying to debug why on of my Ajax loaded forms wasn&#39;t, apparently, properly validated. Even though that the schema specified that the fields are required, the form action would get executed as if the validation wouldn&#39;t have been done or the request was properly validated. I thought at first that there&#39;s an issue with the form class/handling itself, but after some testing I came to the conclusion that it has to be the way I&#39;m doing the AJAX request.</description>
    </item>
    
    <item>
      <title>Getting the registered Zope 3 skin name for an interface</title>
      <link>/blog/2007/03/23/getting-the-registered-zope-3-skin-name-for-an-interface/</link>
      <pubDate>Fri, 23 Mar 2007 15:00:13 -0200</pubDate>
      
      <guid>/blog/2007/03/23/getting-the-registered-zope-3-skin-name-for-an-interface/</guid>
      <description>Problem: I need to get the skin name for a Zope 3 interface registered as skin.
Solution
Starting with Zope 3.3, the skinning mechanism has been simplified and skins are now just interfaces. This means that a skin interface is now a named utility for the IBrowserSkinType. To get the name with which this class has been registered as an utility, something along these lines is needed:
&amp;gt;&amp;gt;&amp;gt; from myapp.layer import IMyAppSkin</description>
    </item>
    
    <item>
      <title>A Zope 3 AJAX viewlet manager</title>
      <link>/blog/2007/02/28/a-zope-3-ajax-viewlet-manager/</link>
      <pubDate>Wed, 28 Feb 2007 19:24:51 -0200</pubDate>
      
      <guid>/blog/2007/02/28/a-zope-3-ajax-viewlet-manager/</guid>
      <description>I&#39;ve finally got tired of writing small fragments of JavaScript code and views to be able to make different areas updatable through ajax for my current Zope 3 application. Plus, when I&#39;ve started writing this application, I&#39;ve started doing the layout with viewlets and managers, and it seems that for each viewlet that I&#39;m creating I have to have a way to get its content through AJAX, which means having a page available for it, and this is very odd, as it almost defeats the point of having viewlets.</description>
    </item>
    
    <item>
      <title>Fresh meat for programmers</title>
      <link>/blog/2007/02/16/fresh-meat-for-programmers/</link>
      <pubDate>Fri, 16 Feb 2007 20:52:16 -0200</pubDate>
      
      <guid>/blog/2007/02/16/fresh-meat-for-programmers/</guid>
      <description>I&#39;ve just discovered (or rediscovered) some resources that I think are important enough to highlight here.
The Zope Corporation has several eggs that are not published in the svn.zope.org subversion repository, eggs located at download.zope.org. There are several very interesting packages there, including some to build an intranet. I&#39;ll definately have a look at them.I&#39;ve rediscovered OpenJSAN, a Javascript repository full of goodies.
And its really nice Planet Javascript
 </description>
    </item>
    
    <item>
      <title>Using Zope Page Templates macros in other templates</title>
      <link>/blog/2007/02/15/using-zope-page-templates-macros-in-other-templates/</link>
      <pubDate>Thu, 15 Feb 2007 16:31:10 -0200</pubDate>
      
      <guid>/blog/2007/02/15/using-zope-page-templates-macros-in-other-templates/</guid>
      <description>I won&#39;t try to discuss here the benefits of ZPT macros vs. viewlets and content providers or viceversa or when to use each of them, I&#39;ll just show a simple (basic even) technique of reusing template code across page templates, using the macros mechanism.
Trying to get the macros with something like context/@@page_with_macros/macros/the_macro doesn&#39;t work, as BrowserView (and BrowserPage) doesn&#39;t know anything about Zope Page Templates. Of course, that&#39;s also because Zope 3 doesn&#39;t directly publishes templates, only pages.</description>
    </item>
    
    <item>
      <title>Using FCKEditor in Ajax views on Zope 3</title>
      <link>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</link>
      <pubDate>Mon, 12 Feb 2007 21:14:48 -0200</pubDate>
      
      <guid>/blog/2007/02/12/using-fckeditor-in-ajax-views-on-zope-3/</guid>
      <description>I&#39;m working on a new, AJAX based application for a friend, which will run under Zope 3. Being a rather &#34;CMS-ish&#34; type of application, I need to provide an easy way to edit some rich text fields. I&#39;ve settled on the FCKEditor, for which there is an already packaged library as zope.html (also depends on zope.file). I would have used TinyMCE, but I hit on a problem: all these visual editors have difficulties when loaded in &#34;</description>
    </item>
    
    <item>
      <title>First glance at Plone 3</title>
      <link>/blog/2007/02/11/first-glance-at-plone-3/</link>
      <pubDate>Sun, 11 Feb 2007 12:49:20 -0200</pubDate>
      
      <guid>/blog/2007/02/11/first-glance-at-plone-3/</guid>
      <description>Thanks to the easy plone 3 buildout (plonout), I&#39;m having my first look at the upcoming Plone 3. Some of the more evident changes:
Versioning is now possible thanks to CMFEditions, which means a &#34;Save as version&#34; option in the edit screen and a &#34;Versions&#34; page on objects.
The Kupu integration has been improved, the Kupu configlet offering new functions: the possibility to edit the toolbar, a new, streamlined interface to control the resource types and the possibility to replace the reference browser with a kupu drawer.</description>
    </item>
    
    <item>
      <title>Zope buildout quickstart</title>
      <link>/blog/2007/02/10/zope-buildout-quickstart/</link>
      <pubDate>Sat, 10 Feb 2007 22:19:56 -0200</pubDate>
      
      <guid>/blog/2007/02/10/zope-buildout-quickstart/</guid>
      <description>One of the bigger players in the latest move to automate Plone and Zope development and deployment has been buildout, so I figured it&#39;s about time to start learning it and see how it can help me. I&#39;m writing this short recipe as I progress through learning buildout to help me remember this stuff later on.
Installing buildoutThe easiest way to install buildout is to get easy_install (a manager for python packages) on your system.</description>
    </item>
    
    <item>
      <title>The /@@/ resource view</title>
      <link>/blog/2007/02/06/the-/-resource-view/</link>
      <pubDate>Tue, 06 Feb 2007 16:17:17 -0200</pubDate>
      
      <guid>/blog/2007/02/06/the-/-resource-view/</guid>
      <description>I recently encountered a problem that I presume would be pretty common when creating a site based on the z3c.layer.minimal browser layer: the resources, although accessible as ++resource++resource_name, are not accessible at the default location used by packages as zc.resourcelibrary: http://localhost/site/@@/resource_name
The reason, as I have guessed, was that a certain page or view was missing, not being registered for the IMinimalLayer, which doesn&#39;t inherit from the IBrowserDefaultLayer. Grepping for &#34;</description>
    </item>
    
    <item>
      <title>Hosting Zope 3 on FreeBSD</title>
      <link>/blog/2007/01/25/hosting-zope-3-on-freebsd/</link>
      <pubDate>Thu, 25 Jan 2007 18:54:20 -0200</pubDate>
      
      <guid>/blog/2007/01/25/hosting-zope-3-on-freebsd/</guid>
      <description>Today I had to setup the hosting of a Zope 3 application on a FreeBSD server. I don&#39;t have much love for FreeBSD as I&#39;m used to the Debian way of doing things, but after a couple of hours of tweaking the apache configuration files and the application I managed to get it properly running on that server.
Some pointers to quickly getting things done:
default apache on FreeBSD doesn&#39;t have mod_proxy installed.</description>
    </item>
    
    <item>
      <title>Permission problems with adapters</title>
      <link>/blog/2006/12/15/permission-problems-with-adapters/</link>
      <pubDate>Fri, 15 Dec 2006 18:53:29 -0200</pubDate>
      
      <guid>/blog/2006/12/15/permission-problems-with-adapters/</guid>
      <description>Recently I encountered a permission problem that I guess can be tipical when working with adapters based on marker interfaces (such as implementing IRatableItem with a class and adapting it to IRating).
The code is classic simplistic example of adaptation, using the IAnnotation to store a rating, with the adapter being something along these lines:
from interfaces import IRating
from zope.annotation.interfaces import IAnnotations
from zope.interface import implements
class RatingAdapter(object):
implements(IRating)</description>
    </item>
    
    <item>
      <title>How to define a new skin in Zope 3</title>
      <link>/blog/2006/10/24/how-to-define-a-new-skin-in-zope-3/</link>
      <pubDate>Tue, 24 Oct 2006 23:34:16 -0300</pubDate>
      
      <guid>/blog/2006/10/24/how-to-define-a-new-skin-in-zope-3/</guid>
      <description>Lifted from zope.app.rotterdam
Create a new browser skin layerfrom zope.publisher.interfaces.browser import IBrowserRequest
from zope.publisher.interfaces.browser import IDefaultBrowserLayer
class rotterdam(IBrowserRequest):
&#34;&#34;&#34;Layer for registering Rotterdam-specific macros.&#34;&#34;&#34;
class Rotterdam(rotterdam, IDefaultBrowserLayer):
&#34;&#34;&#34;The ``Rotterdam`` skin.
It is available via ``++skin++Rotterdam``.
&#34;&#34;&#34;
Register the skin in configure.zcml&amp;lt;interface
interface=&#34;zope.app.rotterdam.Rotterdam&#34;
type=&#34;zope.publisher.interfaces.browser.IBrowserSkinType&#34;
name=&#34;Rotterdam&#34;
/&amp;gt;
Declaring a resource and a page for the skin
 &amp;lt;browser:resource
name=&#34;zope3.css&#34;
file=&#34;zope3.css&#34;
layer=&#34;zope.app.rotterdam.rotterdam&#34; /&amp;gt;
&amp;lt;browser:page
for=&#34;*&#34;
name=&#34;standard_macros&#34;
permission=&#34;zope.View&#34;
class=&#34;.standardmacros.StandardMacros&#34;
layer=&#34;zope.app.rotterdam.rotterdam&#34;
allowed_interface=&#34;zope.interface.common.mapping.IItemMapping&#34;
/&amp;gt;
 </description>
    </item>
    
    <item>
      <title>Deliverence - serving semi-static content out of a live site</title>
      <link>/blog/2006/10/21/deliverence---serving-semi-static-content-out-of-a-live-site/</link>
      <pubDate>Sat, 21 Oct 2006 22:19:51 -0300</pubDate>
      
      <guid>/blog/2006/10/21/deliverence---serving-semi-static-content-out-of-a-live-site/</guid>
      <description>Deliverance is a lightweight, semi-static system for content delivery of CMS resources. It runs in mod_python, generating branded pages and navigation elements, giving high-performance throughput to anonymous visitors.
Sounds interesting, especially in light of my contact with owners of bigger sites and editorial staff.
This product can be downloaded from http://codespeak.net/svn/z3/deliverance/</description>
    </item>
    
    <item>
      <title>Custom traversing with Five and ITraversable</title>
      <link>/blog/2006/10/21/custom-traversing-with-five-and-itraversable/</link>
      <pubDate>Sat, 21 Oct 2006 18:23:34 -0300</pubDate>
      
      <guid>/blog/2006/10/21/custom-traversing-with-five-and-itraversable/</guid>
      <description>This blog already contains a technique on how to customize the traversal to return any object, using __bobo_traverse__
A more simple, modern and elegant way of doing achieving this is detailed in the newly released ImageRepository. Basically, it uses an adapter to change the implementation for ITraversable when the traversal is done on an object implementing a marker interface. I&#39;ve lifted the relevant code and pasted it below, but the original sources should be consulted for reference.</description>
    </item>
    
    <item>
      <title>Easy access to the zope namespace and modules</title>
      <link>/blog/2006/10/20/easy-access-to-the-zope-namespace-and-modules/</link>
      <pubDate>Fri, 20 Oct 2006 20:41:12 -0300</pubDate>
      
      <guid>/blog/2006/10/20/easy-access-to-the-zope-namespace-and-modules/</guid>
      <description>Sometimes I just want to test a package under the zope namespace (installed usually in /opt/Zope2.9/lib/python or /usr/local/Zope3.2/lib/python), like for example the zope.testbrowser the other day. The easiest way to achieve this, without messing around with PYTHONHOME environment variables, or appending paths to sys.path is to change directory to the lib/python folder and start the python interpretor there. Because python will look in the current folder for modules and packages, they will be available in the interpretor.</description>
    </item>
    
    <item>
      <title>Testing file uploads fields with zope.testbrowser</title>
      <link>/blog/2006/10/19/testing-file-uploads-fields-with-zope.testbrowser/</link>
      <pubDate>Thu, 19 Oct 2006 21:43:12 -0300</pubDate>
      
      <guid>/blog/2006/10/19/testing-file-uploads-fields-with-zope.testbrowser/</guid>
      <description>For some reason, the set_file method is not available for ListControls file upload objects inside the Browser object. To be able to fill in the file field, one needs to do
myfilecontrol.mech_control.set_file(filestream, mimetype, filename). The problem gets weirder as set_file() is the method indicated by the README.txt doctest of zope.testbrowser package as the way to upload a file stream in a file upload widget, and I presume the README.txt test doesn&#39;t fail.</description>
    </item>
    
    <item>
      <title>Adding an overrides.zcml</title>
      <link>/blog/2006/10/15/adding-an-overrides.zcml/</link>
      <pubDate>Sun, 15 Oct 2006 19:54:07 -0300</pubDate>
      
      <guid>/blog/2006/10/15/adding-an-overrides.zcml/</guid>
      <description>According to this discussion on #zope3-dev, one must do the following to get overrides to take effect:
add an product-overrides.zcml in which to include &amp;lt;include package=&#34;foo&#34; file=&#34;overrides.zcml&#34; /&amp;gt;the *-overrides.zcml slugs needs to be loaded with includeOverrides </description>
    </item>
    
    <item>
      <title>Zope3 zcml: A content class declaration that provides an interface</title>
      <link>/blog/2006/10/02/zope3-zcml-a-content-class-declaration-that-provides-an-interface/</link>
      <pubDate>Mon, 02 Oct 2006 12:18:02 -0300</pubDate>
      
      <guid>/blog/2006/10/02/zope3-zcml-a-content-class-declaration-that-provides-an-interface/</guid>
      <description>&amp;lt;content class=&#34;.bookmarker.BookMarker&#34;&amp;gt;
&amp;lt;implements
interface=&#34;zope.app.annotation.interfaces.IAttributeAnnotatable&#34;
/&amp;gt;
&amp;lt;/content&amp;gt; </description>
    </item>
    
    <item>
      <title>Zope3: Registering a help page</title>
      <link>/blog/2006/10/01/zope3-registering-a-help-page/</link>
      <pubDate>Sun, 01 Oct 2006 18:31:06 -0300</pubDate>
      
      <guid>/blog/2006/10/01/zope3-registering-a-help-page/</guid>
      <description> &amp;lt;configure
xmlns=&#34;http://namespaces.zope.org/zope&#34;
xmlns:help=&#34;http://namespaces.zope.org/help&#34;
&amp;gt;
&amp;lt;!-- Register Help Topics --&amp;gt;
&amp;lt;help:register
id=&#34;zmi&#34;
title=&#34;Zope ZMI&#34;
doc_path=&#34;./help/ui.stx&#34;
resources=&#34;mgmt-main-1.png&#34;
/&amp;gt;
&amp;lt;help:register id=&#34;welcome&#34;
parent=&#34;onlinehelp&#34;
title=&#34;Welcome&#34;
doc_path=&#34;./help/welcome.stx&#34;
/&amp;gt;
&amp;lt;help:register
id=&#34;onlinehelp&#34;
title=&#34;Online Help System&#34;
doc_path=&#34;./help/README.stx&#34;
/&amp;gt;
&amp;lt;help:register
id=&#34;styleguide&#34;
title=&#34;Zope Style Guide&#34;
doc_path=&#34;styleguides.txt&#34;
class=&#34;zope.app.onlinehelp.onlinehelptopic.RESTOnlineHelpTopic&#34;
/&amp;gt;
&amp;lt;help:register
id=&#34;css&#34;
parent=&#34;styleguide&#34;
title=&#34;CSS Style Guide&#34;
doc_path=&#34;index.html&#34;
class=&#34;zope.app.onlinehelp.onlinehelptopic.ZPTOnlineHelpTopic&#34;
/&amp;gt;
&amp;lt;/configure&amp;gt;
 </description>
    </item>
    
    <item>
      <title>Short recipe for adaptation with Five</title>
      <link>/blog/2006/09/20/short-recipe-for-adaptation-with-five/</link>
      <pubDate>Wed, 20 Sep 2006 20:26:52 -0300</pubDate>
      
      <guid>/blog/2006/09/20/short-recipe-for-adaptation-with-five/</guid>
      <description>&amp;gt;&amp;gt;&amp;gt; from zope.interface import Interface, Attribute, implementsLet&#39;s say we have an object type &#34;Person&#34;. This person can introduce himself with the name.
class IPerson(Interface):
name = Attribute(&#39;Name of the person&#39;)
def say_name():
&#34;&#34;&#34;The name of the person&#34;&#34;&#34;
class Person(object):
implements(IPerson)
def __init__(self, name):
self.name = name
def say_name():
return &#39;My name is &#39; + self.name
Next, we have another object type, let&#39;s say &#34;Worker&#34;, with an interface of IWorker.
class IWorker(Interface):</description>
    </item>
    
    <item>
      <title>Adaptation explained</title>
      <link>/blog/2006/09/10/adaptation-explained/</link>
      <pubDate>Sun, 10 Sep 2006 10:52:39 -0300</pubDate>
      
      <guid>/blog/2006/09/10/adaptation-explained/</guid>
      <description>It seems that there&#39;s a proposal to introduce adaptation in Python 3000, which sparked a discussion and a nice introduction to adaptation on the python-dev list. Another explanation here.</description>
    </item>
    
    <item>
      <title>Cool use of Z3 tech in a Plone product</title>
      <link>/blog/2006/08/12/cool-use-of-z3-tech-in-a-plone-product/</link>
      <pubDate>Sat, 12 Aug 2006 17:07:38 -0300</pubDate>
      
      <guid>/blog/2006/08/12/cool-use-of-z3-tech-in-a-plone-product/</guid>
      <description>Easycommenting is a product that enables commenting on any content item. Rather dull, but the technology used to create it is very interesting. The skeleton is generated with ArchGenXML, but the content is zope 3 aware and can be adapted to use by any other object.
My main interest is to regard it as a documentation, as its implementation is clean and covers several areas of functionality that I&#39;m very interested these days (z3 content in plone, adaptors, views, etc).</description>
    </item>
    
    <item>
      <title>Quick guide to ZopeSkel</title>
      <link>/blog/2006/08/02/quick-guide-to-zopeskel/</link>
      <pubDate>Wed, 02 Aug 2006 18:16:31 -0300</pubDate>
      
      <guid>/blog/2006/08/02/quick-guide-to-zopeskel/</guid>
      <description>Download and run as root ez_installrun:easy_install http://svn.plone.org/svn/collective/ZopeSkel/trunk#egg=ZopeSkel-devcreate a new Plone Core product using paster create -t plone product_name
References: http://danielnouri.org/blog/devel/zope/zopeskel-plonecore.htmlhttp://plone.org/documentation/tutorial/using-zope-formlib-with-plone/tutorial-all-pageIn Zope 2.9, the pythonproducts is needed for this or any other regular python package created with setuptools to work.</description>
    </item>
    
    <item>
      <title>Tutorial on integrating z3 tech into Plone</title>
      <link>/blog/2006/07/30/tutorial-on-integrating-z3-tech-into-plone/</link>
      <pubDate>Sun, 30 Jul 2006 16:22:11 -0300</pubDate>
      
      <guid>/blog/2006/07/30/tutorial-on-integrating-z3-tech-into-plone/</guid>
      <description>There&#39;s a tutorial in the collective that shows a bit of how to use z3 tech inside Plone</description>
    </item>
    
  </channel>
</rss>