<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on The Plone Expanse</title>
    <link>/tags/django/</link>
    <description>Recent content in Django on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2019 Tiberiu Ichim</copyright>
    <lastBuildDate>Mon, 02 Jan 2017 09:46:35 -0100</lastBuildDate>
    
	<atom:link href="/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django templates make me go mad...</title>
      <link>/blog/2017/01/02/django-templates-make-me-go-mad.../</link>
      <pubDate>Mon, 02 Jan 2017 09:46:35 -0100</pubDate>
      
      <guid>/blog/2017/01/02/django-templates-make-me-go-mad.../</guid>
      <description>Why is this a positive thing? Excerpt from Django Oscar, an eComerce framework.
&amp;lt;li class=&#34;step2 {% if step == 2 %}active{% else %}{% if step == 3 %}previous{% else %}{% if step &amp;gt; 2 %}visited{% else %}disabled{% endif %}{% endif %}{% endif %} &#34;&amp;gt; Gah...</description>
    </item>
    
    <item>
      <title>A don&#39;t do for internationalizing Django templates</title>
      <link>/blog/2009/11/30/a-dont-do-for-internationalizing-django-templates/</link>
      <pubDate>Mon, 30 Nov 2009 20:36:41 -0200</pubDate>
      
      <guid>/blog/2009/11/30/a-dont-do-for-internationalizing-django-templates/</guid>
      <description>I&#39;m internationalizing a Pinax website and I&#39;ve encountered this piece of code in a template:
&amp;lt;input type=&#34;submit&#34; value=&#34;{% trans &#34;invite&#34; %}&#34;/&amp;gt; {% blocktrans %}{{ other_user }} to be a friend.{% endblocktrans %}  The message ids for this code would be two separate blocks: &#34;invite&#34; and &#34; %{other_user}s to be a friend&#34;. Both offer very little in terms of context and make the translators job difficult. Correct, in my point of view, would be the more convoluted form of:</description>
    </item>
    
    <item>
      <title>Odd thing in Django: the date filter takes PHP as reference instead of Python</title>
      <link>/blog/2009/11/30/odd-thing-in-django-the-date-filter-takes-php-as-reference-instead-of-python/</link>
      <pubDate>Mon, 30 Nov 2009 11:57:54 -0200</pubDate>
      
      <guid>/blog/2009/11/30/odd-thing-in-django-the-date-filter-takes-php-as-reference-instead-of-python/</guid>
      <description>I wonder what possible explanation there is for the behaviour of the date template filter.
Uses the same format as PHP&#39;s date() function (http://php.net/date) with some custom extensions.  I understand where Django comes from, but I think this sort of things should be more aligned with the rest of the Python world.</description>
    </item>
    
    <item>
      <title>If Django templates are an improvement over XML templates, then, by all means, please give me XML</title>
      <link>/blog/2009/11/18/if-django-templates-are-an-improvement-over-xml-templates-then-by-all-means-please-give-me-xml/</link>
      <pubDate>Wed, 18 Nov 2009 14:27:15 -0200</pubDate>
      
      <guid>/blog/2009/11/18/if-django-templates-are-an-improvement-over-xml-templates-then-by-all-means-please-give-me-xml/</guid>
      <description>I fail to see how
{% block %} ... {% endblock %}  is in any way better or &#34;less scary&#34; then, let&#39;s say
&amp;lt;dj:block&amp;gt; ... &amp;lt;/dj:block&amp;gt;  Yet another rant, this time triggered by the error I got when writing this piece of code:
{% blocktrans with offer.offerer.username as offerer_username and offer.offered_time|date as offerer_date %} ... {% endblocktrans %}  I just wanted to split the tag on multiple lines, but it seems that&#39;s not possible.</description>
    </item>
    
    <item>
      <title>The case against Django templates</title>
      <link>/blog/2009/11/17/the-case-against-django-templates/</link>
      <pubDate>Tue, 17 Nov 2009 19:00:49 -0200</pubDate>
      
      <guid>/blog/2009/11/17/the-case-against-django-templates/</guid>
      <description>I have many grudges against the django templating language and its templates (in short, I hate them), so I&#39;m gathering evidence to support what my &#34;spider sense&#34; tells me. Today the template tag system goes under fire.
Given the following template fragment:
{% load i18n %} {% load avatar_tags %} {% load voting_tags %} {% load pagination_tags %} {% load extra_voting_tags %} {% load in_filter %} {% load extra_tagging_tags %} {% load sorting_tags %} Which one is responsible for the following &#34;</description>
    </item>
    
    <item>
      <title>Django&#39;s makemessages sucks for my use cases</title>
      <link>/blog/2009/11/12/djangos-makemessages-sucks-for-my-use-cases/</link>
      <pubDate>Thu, 12 Nov 2009 20:57:19 -0200</pubDate>
      
      <guid>/blog/2009/11/12/djangos-makemessages-sucks-for-my-use-cases/</guid>
      <description>Yet another angry rant, caused, of course, by using Django in anger. Nothing wrong with using something in anger, that&#39;s the real way I learn something. Zope 3 even has an online book on how to use it in anger.
That said, Django&#39;s makemessages administrative command sucks by being way too inflexible to anything but the ideal Django development environment. My environment looks like this: I have a project based on Pinax, which I&#39;m developing and deploying using zc.</description>
    </item>
    
    <item>
      <title>Using CherryPy to work around a Django/flup bug</title>
      <link>/blog/2009/11/08/using-cherrypy-to-work-around-a-django/flup-bug/</link>
      <pubDate>Sun, 08 Nov 2009 21:35:58 -0200</pubDate>
      
      <guid>/blog/2009/11/08/using-cherrypy-to-work-around-a-django/flup-bug/</guid>
      <description>A bug creeped in one of my Django 1.1 projects that is in beta-testing right now: the Pinax wiki app looks for a REMOTE_ADDR value in request.META, which was not set in my environment. My environment is a pretty standard (as far as this setup goes) nginx + fcgi (flup on the django side) + django. Further work on this issue revealed, step by step, that:
REMOTE_ADDR needs to be somehow set by a Django middleware, based on an http header, so I&#39;ve added django.</description>
    </item>
    
    <item>
      <title>Django gotcha: the urls.py needs to define the 404 view</title>
      <link>/blog/2009/11/05/django-gotcha-the-urls.py-needs-to-define-the-404-view/</link>
      <pubDate>Thu, 05 Nov 2009 21:06:48 -0200</pubDate>
      
      <guid>/blog/2009/11/05/django-gotcha-the-urls.py-needs-to-define-the-404-view/</guid>
      <description>Probably this is documented somewhere in the Django docs, but, I mean, who has time to read the docs? :-) In the urls.py file for my project I didn&#39;t do a
from django.conf.urls.defaults import * because that&#39;s just bad style. Instead I&#39;ve just imported what I needed: patterns, include and url. Later on I got this error in my email:
Traceback (most recent call last): File &#34;/home/zope/djangoprojects/lib/python2.5/site-packages/Django-1.1.1-py2.5.egg/django/core/handlers/base.py&#34;, line 118, in get_response callback, param_dict = resolver.</description>
    </item>
    
    <item>
      <title>Questioning the quality of code in Django third-party projects</title>
      <link>/blog/2009/10/07/questioning-the-quality-of-code-in-django-third-party-projects/</link>
      <pubDate>Wed, 07 Oct 2009 19:17:32 -0300</pubDate>
      
      <guid>/blog/2009/10/07/questioning-the-quality-of-code-in-django-third-party-projects/</guid>
      <description>I&#39;m not sure how I feel about this... In some ways, I think it&#39;s very positive that a relative newcomer can just jump in and release an opensource project that can be taken and reused by others. Did Django allowed this? That&#39;s very positively PHP-like...
I&#39;m talking about a glimpse at some code that I caught while helping my brother integrate the Diamandas forum to a site he&#39;s doing. It stunned me that it has the marks of a developer that is not very experienced with the language or the framework, but it&#39;s moving at a speed that is too great to stop and fix or check what he&#39;s doing.</description>
    </item>
    
    <item>
      <title>Customizing Django LFS (Lightning Fast Shop) for the non-django developer</title>
      <link>/blog/2009/09/17/customizing-django-lfs-lightning-fast-shop-for-the-non-django-developer/</link>
      <pubDate>Thu, 17 Sep 2009 22:59:23 -0300</pubDate>
      
      <guid>/blog/2009/09/17/customizing-django-lfs-lightning-fast-shop-for-the-non-django-developer/</guid>
      <description>I&#39;m not a Django developer, but I have a project that involves deploying a LFS site, and it took me a bit of time and effort to understand how to customize its templates and resources. This all may seem obvious to the any Django developer, but I&#39;m not, so I think this info needs to be out there.
As a side note, at first I have reviewed Satchmo, as it seemed to have more traction in the Django community (being a Zope/Plone developer, I am more aware of the previous work done by the LFS developer, the EasyShop).</description>
    </item>
    
  </channel>
</rss>