<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zcatalog on The Plone Expanse</title>
    <link>/tags/zcatalog/index.xml</link>
    <description>Recent content in Zcatalog on The Plone Expanse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@2016 Tiberiu Ichim</copyright>
    <atom:link href="/tags/zcatalog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Do you really need that metadata column?</title>
      <link>/blog/2017/01/08/do-you-really-need-that-metadata-column/</link>
      <pubDate>Sun, 08 Jan 2017 09:21:46 -0100</pubDate>
      
      <guid>/blog/2017/01/08/do-you-really-need-that-metadata-column/</guid>
      <description>&lt;p&gt;It is one of the tenets of Plone optimization that brain.getObject() should be avoided and instead new metadata columns should be defined, to pass have that information in the brain. In the interest of keeping the ZODB free of junk and avoid duplication of information, I argue that it is possible sometimes to avoid polluting the catalog and instead use the information stored in the index itself.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As an example: when exploring collective.portlet.collectionfilter I&#39;ve noticed that the definition of the filters need both the index name and the metadata column. Ex:&lt;/p&gt;
&lt;pre&gt;GROUPBY_CRITERIA = {
    &#39;Subject&#39;: {
        &#39;index&#39;: &#39;Subject&#39;,  # For querying
        &#39;metadata&#39;: &#39;Subject&#39;,  # For constructing the list
        &#39;display_modifier&#39;: None,  # For modifying list items (e.g. dates)
        &#39;query_range&#39;: None  # For range searches (e.g. for dates or numbers)
    },
...&lt;/pre&gt;
&lt;div&gt;The metadata is needed because the search result is a whole bag of brains and the portlet groups results by their values, so it needs to know the real values. With minimal changes it is possible to avoid the need for that metadata column.&lt;/div&gt;
&lt;p&gt;This is the original code in collectionfilter.py:&lt;/p&gt;
&lt;pre&gt;attr = GROUPBY_CRITERIA[self.data.group_by][&#39;metadata&#39;]
mod = GROUPBY_CRITERIA[self.data.group_by][&#39;display_modifier&#39;]

grouped_results = {}
for item in results:
    val = getattr(item, attr, None)
    if callable(val):
        val = val()
    if not getattr(val, &#39;__iter__&#39;, False):
        val = [val]&lt;/pre&gt;
&lt;div&gt;And these are the minimal changes:&lt;/div&gt;
&lt;pre&gt;mod = GROUPBY_CRITERIA[self.data.group_by][&#39;display_modifier&#39;]

catalog = getToolByName(self.context, &#39;portal_catalog&#39;)
unindex = catalog._catalog.indexes[idx]._unindex

grouped_results = {}
for item in results:
    rid = item._brain.getRID()
    # val = getattr(item, attr, None)
    val = unindex.get(rid)
    if callable(val):
        val = val()
    if not getattr(val, &#39;__iter__&#39;, False):
        val = [val]&lt;/pre&gt;
&lt;p&gt;It reads the field values from the _unindex mapping of the indexes (which exist for most of the indexes in the Plone catalog. Exceptions are indexes for Title, Description, getObjPositionInParent and SearchableText). Most of the ZCatalog indexes have two mappings where they store information: the forward &#34;mapping&#34; (field value =&amp;gt; objectid) and the reverse mapping (object id =&amp;gt; field value). In this above snippet we&#39;re reading the reverse mapping to get the original field value. So, no need for a dedicated metadata column.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>